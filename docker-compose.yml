version: '3.8'

services:
  # Atlas Gateway
  gateway:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      - witness-1
      - witness-2
      - witness-3
      - witness-4
      - witness-5
    networks:
      - atlas-network
    restart: unless-stopped

  # Witness Node 1 (US East)
  witness-1:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.witness
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - WITNESS_ID=w1
      - WITNESS_REGION=us-east-1
      - SECURITY_TRACK=Z
      - DATA_DIR=/app/data
    volumes:
      - witness-1-data:/app/data
    networks:
      - atlas-network
    restart: unless-stopped

  # Witness Node 2 (US West)
  witness-2:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.witness
    ports:
      - "3002:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - WITNESS_ID=w2
      - WITNESS_REGION=us-west-2
      - SECURITY_TRACK=Z
      - DATA_DIR=/app/data
    volumes:
      - witness-2-data:/app/data
    networks:
      - atlas-network
    restart: unless-stopped

  # Witness Node 3 (EU West)
  witness-3:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.witness
    ports:
      - "3003:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - WITNESS_ID=w3
      - WITNESS_REGION=eu-west-1
      - SECURITY_TRACK=Z
      - DATA_DIR=/app/data
    volumes:
      - witness-3-data:/app/data
    networks:
      - atlas-network
    restart: unless-stopped

  # Witness Node 4 (AP Southeast)
  witness-4:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.witness
    ports:
      - "3004:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - WITNESS_ID=w4
      - WITNESS_REGION=ap-southeast-1
      - SECURITY_TRACK=Z
      - DATA_DIR=/app/data
    volumes:
      - witness-4-data:/app/data
    networks:
      - atlas-network
    restart: unless-stopped

  # Witness Node 5 (AP Northeast)
  witness-5:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.witness
    ports:
      - "3005:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - WITNESS_ID=w5
      - WITNESS_REGION=ap-northeast-1
      - SECURITY_TRACK=Z
      - DATA_DIR=/app/data
    volumes:
      - witness-5-data:/app/data
    networks:
      - atlas-network
    restart: unless-stopped

  # Web Application
  web:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.web
    ports:
      - "3006:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - NEXT_PUBLIC_GATEWAY_URL=http://gateway:3000
    depends_on:
      - gateway
    networks:
      - atlas-network
    restart: unless-stopped

  # Admin Dashboard
  admin:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.admin
    ports:
      - "3007:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - NEXT_PUBLIC_GATEWAY_URL=http://gateway:3000
    depends_on:
      - gateway
    networks:
      - atlas-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway
      - web
      - admin
    networks:
      - atlas-network
    restart: unless-stopped

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=atlas-collector,service.version=1.0.0
    networks:
      - atlas-network
    restart: unless-stopped

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # Jaeger gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - atlas-network
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - atlas-network
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3030:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
      - jaeger
    networks:
      - atlas-network
    restart: unless-stopped

volumes:
  witness-1-data:
  witness-2-data:
  witness-3-data:
  witness-4-data:
  witness-5-data:
  prometheus_data:
  grafana_data:

networks:
  atlas-network:
    driver: bridge
