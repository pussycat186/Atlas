openapi: 3.0.3
info:
  title: Atlas v12 API
  description: |
    Atlas v12 provides a secure, multi-witness data integrity platform with breakthrough innovations.
    
    ## Authentication
    
    Atlas v12 uses API keys for authentication. Include your API key in the `Authorization` header:
    
    ```
    Authorization: Bearer sk_live_your_api_key_here
    ```
    
    ## Rate Limiting
    
    API requests are rate limited to 1000 requests per hour per API key. Rate limit headers are included in responses:
    
    - `X-RateLimit-Limit`: Request limit per hour
    - `X-RateLimit-Remaining`: Remaining requests in current window
    - `X-RateLimit-Reset`: Time when the rate limit resets
    
    ## Error Handling
    
    Atlas v12 uses conventional HTTP response codes and returns errors in the following format:
    
    ```json
    {
      "error": {
        "code": "INVALID_API_KEY",
        "message": "The provided API key is invalid",
        "details": {
          "field": "authorization",
          "value": "sk_invalid_key"
        }
      }
    }
    ```
    
    ## Multi-Witness Architecture
    
    Atlas v12 uses a distributed witness network to ensure data integrity. Each data submission requires witness attestations from at least 4 out of 5 witness nodes to achieve quorum.
    
    ## Demo Mode
    
    This API documentation reflects the demo mode configuration. In production, additional security measures and rate limiting may apply.
  version: 1.0.0
  contact:
    name: Atlas Support
    url: https://docs.atlas.dev
    email: support@atlas.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.atlas.dev/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server
tags:
  - name: Authentication
    description: API key management and authentication
  - name: Data Ingestion
    description: Submit and manage data with witness attestations
  - name: Witness Network
    description: Monitor witness node health and quorum status
  - name: Metrics
    description: Access performance metrics and analytics
  - name: Administration
    description: System administration and monitoring
paths:
  /health:
    get:
      tags:
        - Administration
      summary: Health Check
      description: Check the health status of the Atlas Gateway
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00Z"
                  version:
                    type: string
                    example: "1.0.0"
                  witnesses:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 5
                      healthy:
                        type: integer
                        example: 4
                      quorum:
                        type: boolean
                        example: true
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /messages:
    post:
      tags:
        - Data Ingestion
      summary: Submit Message
      description: |
        Submit a message to the Atlas Gateway for witness attestation.
        
        The message will be distributed to the witness network for attestation.
        A quorum of at least 4 out of 5 witnesses must attest to the message
        for it to be considered valid.
      operationId: submitMessage
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSubmission'
            examples:
              simple:
                summary: Simple message
                value:
                  message: "Hello, Atlas!"
                  metadata:
                    source: "webhook"
                    timestamp: "2024-01-01T00:00:00Z"
              complex:
                summary: Complex message with metadata
                value:
                  message: "User signed up"
                  metadata:
                    userId: "123"
                    email: "user@example.com"
                    source: "webhook"
                    timestamp: "2024-01-01T00:00:00Z"
                    tags: ["user", "signup", "web"]
      responses:
        '200':
          description: Message successfully submitted and attested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              examples:
                success:
                  summary: Successful submission
                  value:
                    id: "msg_abc123def456"
                    status: "success"
                    timestamp: "2024-01-01T00:00:00Z"
                    witnesses: ["w1", "w2", "w3", "w4"]
                    quorum: true
                    attestations: 4
                    data:
                      message: "Hello, Atlas!"
                      metadata:
                        source: "webhook"
                        timestamp: "2024-01-01T00:00:00Z"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Data Ingestion
      summary: List Messages
      description: Retrieve a paginated list of submitted messages
      operationId: listMessages
      security:
        - ApiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of messages to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of messages to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by message status
          required: false
          schema:
            type: string
            enum: [success, pending, failed]
        - name: start_date
          in: query
          description: Filter messages from this date
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: Filter messages until this date
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /messages/{messageId}:
    get:
      tags:
        - Data Ingestion
      summary: Get Message
      description: Retrieve details of a specific message
      operationId: getMessage
      security:
        - ApiKeyAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          description: Unique identifier of the message
          schema:
            type: string
            example: "msg_abc123def456"
      responses:
        '200':
          description: Message details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetail'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /witnesses:
    get:
      tags:
        - Witness Network
      summary: List Witnesses
      description: Get the status of all witness nodes in the network
      operationId: listWitnesses
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of witness nodes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WitnessList'
              examples:
                healthy:
                  summary: Healthy witness network
                  value:
                    witnesses:
                      - id: "w1"
                        status: "healthy"
                        region: "us-east-1"
                        lastSeen: "2024-01-01T00:00:00Z"
                        attestations: 12345
                        uptime: "99.9%"
                      - id: "w2"
                        status: "healthy"
                        region: "us-west-2"
                        lastSeen: "2024-01-01T00:00:00Z"
                        attestations: 12340
                        uptime: "99.8%"
                      - id: "w3"
                        status: "degraded"
                        region: "eu-west-1"
                        lastSeen: "2024-01-01T00:00:00Z"
                        attestations: 12300
                        uptime: "95.2%"
                      - id: "w4"
                        status: "healthy"
                        region: "ap-southeast-2"
                        lastSeen: "2024-01-01T00:00:00Z"
                        attestations: 12350
                        uptime: "99.7%"
                      - id: "w5"
                        status: "offline"
                        region: "us-east-1"
                        lastSeen: "2023-12-31T23:45:00Z"
                        attestations: 0
                        uptime: "0%"
                    quorum:
                      required: 4
                      achieved: true
                      healthyCount: 4
                      totalCount: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /witnesses/{witnessId}:
    get:
      tags:
        - Witness Network
      summary: Get Witness
      description: Get detailed status of a specific witness node
      operationId: getWitness
      security:
        - ApiKeyAuth: []
      parameters:
        - name: witnessId
          in: path
          required: true
          description: Witness node identifier
          schema:
            type: string
            enum: [w1, w2, w3, w4, w5]
            example: "w1"
      responses:
        '200':
          description: Witness details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WitnessDetail'
        '404':
          description: Witness not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /metrics:
    get:
      tags:
        - Metrics
      summary: Get Metrics
      description: Retrieve system and application metrics
      operationId: getMetrics
      security:
        - ApiKeyAuth: []
      parameters:
        - name: time_range
          in: query
          description: Time range for metrics
          required: false
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d, 30d]
            default: "1h"
        - name: metric_type
          in: query
          description: Type of metrics to retrieve
          required: false
          schema:
            type: string
            enum: [system, application, witness, business]
            default: "application"
      responses:
        '200':
          description: Metrics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
              examples:
                application:
                  summary: Application metrics
                  value:
                    timeRange: "1h"
                    metrics:
                      messageRate: 1247
                      latencyP50: 45
                      latencyP95: 89
                      latencyP99: 156
                      errorRate: 0.2
                      throughput: 1250
                    timestamp: "2024-01-01T00:00:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/quorum:
    get:
      tags:
        - Administration
      summary: Get Quorum Status
      description: Get detailed quorum status and witness network health
      operationId: getQuorumStatus
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Quorum status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuorumStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/system:
    get:
      tags:
        - Administration
      summary: Get System Status
      description: Get comprehensive system status and health information
      operationId: getSystemStatus
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: System status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        API key authentication. Include your API key in the Authorization header:
        
        ```
        Authorization: Bearer sk_live_your_api_key_here
        ```
  schemas:
    MessageSubmission:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: The message content to be attested
          example: "Hello, Atlas!"
          maxLength: 10000
        metadata:
          type: object
          description: Additional metadata associated with the message
          additionalProperties: true
          example:
            source: "webhook"
            timestamp: "2024-01-01T00:00:00Z"
            userId: "123"
    MessageResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the message
          example: "msg_abc123def456"
        status:
          type: string
          enum: [success, pending, failed]
          description: Status of the message submission
          example: "success"
        timestamp:
          type: string
          format: date-time
          description: When the message was processed
          example: "2024-01-01T00:00:00Z"
        witnesses:
          type: array
          items:
            type: string
          description: List of witness IDs that attested to the message
          example: ["w1", "w2", "w3", "w4"]
        quorum:
          type: boolean
          description: Whether quorum was achieved
          example: true
        attestations:
          type: integer
          description: Number of witness attestations received
          example: 4
        data:
          $ref: '#/components/schemas/MessageSubmission'
    MessageDetail:
      allOf:
        - $ref: '#/components/schemas/MessageResponse'
        - type: object
          properties:
            attestationDetails:
              type: array
              items:
                $ref: '#/components/schemas/AttestationDetail'
            traceId:
              type: string
              description: Distributed trace identifier
              example: "trace_abc123def456"
    AttestationDetail:
      type: object
      properties:
        witnessId:
          type: string
          example: "w1"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        signature:
          type: string
          description: Cryptographic signature of the attestation
          example: "sig_abc123def456"
        region:
          type: string
          example: "us-east-1"
    MessageList:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageResponse'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Pagination:
      type: object
      properties:
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        total:
          type: integer
          example: 150
        hasMore:
          type: boolean
          example: true
    WitnessList:
      type: object
      properties:
        witnesses:
          type: array
          items:
            $ref: '#/components/schemas/Witness'
        quorum:
          $ref: '#/components/schemas/QuorumInfo'
    Witness:
      type: object
      properties:
        id:
          type: string
          example: "w1"
        status:
          type: string
          enum: [healthy, degraded, offline]
          example: "healthy"
        region:
          type: string
          example: "us-east-1"
        lastSeen:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        attestations:
          type: integer
          description: Total number of attestations made
          example: 12345
        uptime:
          type: string
          description: Uptime percentage
          example: "99.9%"
    WitnessDetail:
      allOf:
        - $ref: '#/components/schemas/Witness'
        - type: object
          properties:
            version:
              type: string
              example: "1.0.0"
            resources:
              $ref: '#/components/schemas/ResourceUsage'
            lastAttestation:
              type: string
              format: date-time
              example: "2024-01-01T00:00:00Z"
            networkLatency:
              type: number
              description: Average network latency in milliseconds
              example: 45.2
    QuorumInfo:
      type: object
      properties:
        required:
          type: integer
          description: Minimum witnesses required for quorum
          example: 4
        achieved:
          type: boolean
          description: Whether quorum is currently achieved
          example: true
        healthyCount:
          type: integer
          description: Number of healthy witnesses
          example: 4
        totalCount:
          type: integer
          description: Total number of witnesses
          example: 5
    QuorumStatus:
      type: object
      properties:
        quorum:
          $ref: '#/components/schemas/QuorumInfo'
        witnesses:
          type: array
          items:
            $ref: '#/components/schemas/Witness'
        lastUpdate:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        conflicts:
          type: integer
          description: Number of witness conflicts in the last hour
          example: 2
    MetricsResponse:
      type: object
      properties:
        timeRange:
          type: string
          example: "1h"
        metrics:
          type: object
          properties:
            messageRate:
              type: integer
              description: Messages per hour
              example: 1247
            latencyP50:
              type: number
              description: 50th percentile latency in milliseconds
              example: 45
            latencyP95:
              type: number
              description: 95th percentile latency in milliseconds
              example: 89
            latencyP99:
              type: number
              description: 99th percentile latency in milliseconds
              example: 156
            errorRate:
              type: number
              description: Error rate percentage
              example: 0.2
            throughput:
              type: number
              description: Requests per second
              example: 1250
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
    SystemStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: "healthy"
        version:
          type: string
          example: "1.0.0"
        uptime:
          type: string
          description: System uptime
          example: "99.9%"
        resources:
          $ref: '#/components/schemas/ResourceUsage'
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceStatus'
        lastUpdate:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
    ServiceStatus:
      type: object
      properties:
        name:
          type: string
          example: "atlas-gateway"
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: "healthy"
        version:
          type: string
          example: "1.0.0"
        uptime:
          type: string
          example: "99.9%"
    ResourceUsage:
      type: object
      properties:
        cpu:
          type: number
          description: CPU usage percentage
          example: 23.5
        memory:
          type: number
          description: Memory usage percentage
          example: 67.2
        disk:
          type: number
          description: Disk usage percentage
          example: 45.8
        network:
          type: object
          properties:
            bytesIn:
              type: integer
              example: 1024000
            bytesOut:
              type: integer
              example: 2048000
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Machine-readable error code
              example: "INVALID_API_KEY"
            message:
              type: string
              description: Human-readable error message
              example: "The provided API key is invalid"
            details:
              type: object
              description: Additional error details
              additionalProperties: true
              example:
                field: "authorization"
                value: "sk_invalid_key"
            timestamp:
              type: string
              format: date-time
              description: When the error occurred
              example: "2024-01-01T00:00:00Z"
            requestId:
              type: string
              description: Unique identifier for the request
              example: "req_abc123def456"
