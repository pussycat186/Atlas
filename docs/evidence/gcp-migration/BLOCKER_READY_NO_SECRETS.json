{
  "timestamp": "2025-10-19T00:00:00Z",
  "directive": "ATLAS_MIGRATE_VERCEL_TO_GCP_FROM_INTENT",
  "status": "BLOCKED",
  "blocker_type": "READY_NO_SECRETS",
  "phase": "PHASE_A0_PREREQUISITES",
  "missing_credentials": {
    "github_admin": {
      "required": "One of the following for GitHub API access to set repository secrets",
      "options": [
        {
          "option": "GitHub Personal Access Token (Fine-Grained)",
          "env_var": "GH_ADMIN_TOKEN",
          "permissions": [
            "Administration: Read and Write (for repository secrets)",
            "Contents: Read and Write (for commits)",
            "Actions: Read and Write (for workflow dispatch)"
          ],
          "how_to_create": "https://github.com/settings/tokens?type=beta",
          "status": "NOT_FOUND"
        },
        {
          "option": "GitHub App Credentials",
          "env_vars": ["GH_APP_ID", "GH_APP_INSTALLATION_ID", "GH_APP_PRIVATE_KEY"],
          "permissions": [
            "Repository secrets: Read and Write",
            "Contents: Read and Write",
            "Actions: Read and Write"
          ],
          "how_to_create": "https://github.com/settings/apps/new",
          "status": "NOT_FOUND"
        }
      ],
      "current_state": "NO_CREDENTIALS_FOUND"
    },
    "gcp_infrastructure": {
      "required": "One of the following for GCP infrastructure provisioning",
      "options": [
        {
          "option": "Existing Workload Identity Federation (WIF)",
          "env_vars": [
            "GCP_PROJECT_ID",
            "GCP_PROJECT_NUMBER",
            "GCP_REGION",
            "GCP_WORKLOAD_ID_PROVIDER",
            "GCP_DEPLOYER_SA",
            "ARTIFACT_REPO"
          ],
          "description": "If OIDC already configured between GitHub Actions and GCP",
          "status": "NOT_FOUND"
        },
        {
          "option": "Bootstrap Service Account Key (Temporary)",
          "env_vars": [
            "GCP_PROJECT_ID",
            "GCP_PROJECT_NUMBER",
            "GCP_REGION",
            "GCP_BOOTSTRAP_SA_KEY",
            "ARTIFACT_REPO"
          ],
          "description": "Short-lived deployer key to create WIF, then deleted",
          "security_note": "This key will be used once to create OIDC/WIF infrastructure, then immediately deleted",
          "status": "NOT_FOUND"
        }
      ],
      "current_state": "NO_CREDENTIALS_FOUND"
    },
    "domain_mapping": {
      "required": "Domain configuration for custom domains",
      "env_var": "DOMAINS_JSON",
      "format": "{\"proof_messenger\":\"<host>\",\"admin_insights\":\"<host>\",\"dev_portal\":\"<host>\"}",
      "example": "{\"proof_messenger\":\"proof.atlas.com\",\"admin_insights\":\"admin.atlas.com\",\"dev_portal\":\"dev.atlas.com\"}",
      "status": "NOT_FOUND",
      "impact": "Can proceed without custom domains, services will use Cloud Run URLs"
    }
  },
  "directive_stop_policy": {
    "rule_1": "If essential GitHub admin token AND no GitHub App secrets found → READY_NO_SECRETS:['GH_ADMIN_TOKEN or GitHub App creds'] and STOP",
    "rule_2": "If neither (1) full WIF set (GCP_WORKLOAD_ID_PROVIDER & GCP_DEPLOYER_SA) nor (2) GCP_BOOTSTRAP_SA_KEY present → READY_NO_SECRETS:['WIF or BOOTSTRAP_SA_KEY'] and STOP",
    "current_status": "BOTH RULES TRIGGERED - HARD STOP"
  },
  "recommended_action": {
    "priority": "CRITICAL",
    "steps": [
      {
        "step": 1,
        "action": "Create GitHub Personal Access Token (Fine-Grained)",
        "url": "https://github.com/settings/tokens?type=beta",
        "permissions": [
          "Repository: pussycat186/Atlas",
          "Administration: Read and Write",
          "Contents: Read and Write",
          "Actions: Read and Write"
        ],
        "expiration": "Recommend 90 days",
        "command": "Set environment variable: $env:GH_ADMIN_TOKEN = 'github_pat_XXXXX'"
      },
      {
        "step": 2,
        "action": "Set GCP Project Credentials",
        "options": [
          {
            "option_a": "If OIDC already exists (from previous work)",
            "commands": [
              "$env:GCP_PROJECT_ID = 'your-project-id'",
              "$env:GCP_PROJECT_NUMBER = 'your-project-number'",
              "$env:GCP_REGION = 'asia-southeast1'",
              "$env:GCP_WORKLOAD_ID_PROVIDER = 'projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/github-pool/providers/github-provider'",
              "$env:GCP_DEPLOYER_SA = 'github-deployer@PROJECT_ID.iam.gserviceaccount.com'",
              "$env:ARTIFACT_REPO = 'atlas'"
            ]
          },
          {
            "option_b": "If OIDC does not exist (create new)",
            "requirements": [
              "Create GCP Service Account with Owner/Editor role (temporary)",
              "Generate JSON key file",
              "Set GCP_BOOTSTRAP_SA_KEY to base64-encoded JSON",
              "Script will create OIDC, then delete key"
            ],
            "commands": [
              "$env:GCP_PROJECT_ID = 'your-project-id'",
              "$env:GCP_PROJECT_NUMBER = 'your-project-number'",
              "$env:GCP_REGION = 'asia-southeast1'",
              "$env:GCP_BOOTSTRAP_SA_KEY = (Get-Content path/to/key.json -Raw | ConvertTo-Json -Compress)",
              "$env:ARTIFACT_REPO = 'atlas'"
            ],
            "gcp_setup_commands": [
              "gcloud iam service-accounts create atlas-bootstrap --display-name='Atlas Bootstrap'",
              "gcloud projects add-iam-policy-binding PROJECT_ID --member='serviceAccount:atlas-bootstrap@PROJECT_ID.iam.gserviceaccount.com' --role='roles/owner'",
              "gcloud iam service-accounts keys create key.json --iam-account=atlas-bootstrap@PROJECT_ID.iam.gserviceaccount.com"
            ]
          }
        ]
      },
      {
        "step": 3,
        "action": "Set Domain Mapping (Optional)",
        "command": "$env:DOMAINS_JSON = '{\"proof_messenger\":\"proof.atlas.com\",\"admin_insights\":\"admin.atlas.com\",\"dev_portal\":\"dev.atlas.com\"}'",
        "note": "Can skip for initial deployment, services will use *.run.app URLs"
      },
      {
        "step": 4,
        "action": "Re-run migration directive",
        "command": "Resume this conversation with the directive once credentials are set"
      }
    ]
  },
  "current_repository_state": {
    "completed_phases": [
      "S0-S5: Infrastructure-as-code preparation (Next.js config, Dockerfiles, GCP scripts, CI/CD, secrets templates)",
      "S11: Observability workflows (atlas-scheduled.yml)",
      "S12: Cost guards and scaling limits",
      "S15: DR runbook and rollback automation",
      "S16: Vercel decommission plan"
    ],
    "blocked_phases": [
      "S6-S10: Deployment and validation (requires GCP infrastructure)",
      "S13-S14: UX screenshots and Figma sync (optional)",
      "S17: Final summary"
    ],
    "evidence_root": "docs/evidence/gcp-migration/20251017-164352/",
    "commits_pushed": 9,
    "migration_progress": "61% (11 of 18 stages complete - all preparation done)"
  },
  "alternative_approach": {
    "description": "If you want to proceed with existing GitHub secrets infrastructure",
    "note": "The previous migration work (S0-S16) assumed GitHub secrets were manually configured. This directive requires programmatic secret creation via GitHub API, which needs admin credentials.",
    "recommendation": "Provide the required credentials above to enable full automation from intent to deployment."
  }
}
