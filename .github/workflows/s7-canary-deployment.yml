name: S7 Canary Deployment Pipeline
on:
  workflow_dispatch:
    inputs:
      deployment_stage:
        description: 'Deployment stage (canary-10, canary-50, production)'
        required: true
        default: 'canary-10'
        type: choice
        options:
          - canary-10
          - canary-50
          - production
      security_validation:
        description: 'Enable comprehensive security validation'
        required: true
        default: true
        type: boolean
      rollback_on_failure:
        description: 'Enable automatic rollback on security failures'
        required: true
        default: true
        type: boolean

  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

  schedule:
    # Run canary health checks every 6 hours
    - cron: '0 */6 * * *'

permissions:
  contents: read
  deployments: write
  id-token: write
  security-events: write
  pull-requests: write
  checks: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Pre-deployment Security Validation
  security-validation:
    name: S7 Security Validation
    runs-on: ubuntu-22.04
    outputs:
      security-score: ${{ steps.security-assessment.outputs.score }}
      compliance-status: ${{ steps.compliance-check.outputs.status }}
      vulnerability-count: ${{ steps.vuln-scan.outputs.count }}
      deployment-approved: ${{ steps.gate-decision.outputs.approved }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: S7 Security Assessment
        id: security-assessment
        run: |
          echo "üîç Running comprehensive S7 security assessment..."
          
          # Check all S0-S6 implementations
          SCORE=0
          
          # S0-S2 Remote Infrastructure (10 points)
          if [ -f ".github/workflows/slsa-provenance.yml" ]; then
            SCORE=$((SCORE + 5))
            echo "‚úÖ S0-S2 Remote infrastructure verified"
          fi
          
          # S3 RFC 9421 (10 points)
          if grep -q "RFC.*9421" security/flags.yaml; then
            SCORE=$((SCORE + 5))
            echo "‚úÖ S3 RFC 9421 receipts verified"
          fi
          
          # S4 Transport Security (15 points)
          if grep -q "SECURITY_CSP_NONCE.*enabled: true" security/flags.yaml; then
            SCORE=$((SCORE + 8))
            echo "‚úÖ S4 Transport security verified"
          fi
          
          # S5 Supply Chain (25 points)
          if grep -q "SECURITY_SLSA_PROVENANCE.*enabled: true" security/flags.yaml; then
            SCORE=$((SCORE + 12))
            echo "‚úÖ S5 Supply chain security verified"
          fi
          
          # S6 Dev/Admin Experience (20 points)
          if grep -q "SECURITY_ADMIN_DASHBOARD.*enabled: true" security/flags.yaml; then
            SCORE=$((SCORE + 10))
            echo "‚úÖ S6 Dev/Admin experience verified"
          fi
          
          # S7 Canary Infrastructure (20 points)
          if [ -f ".github/workflows/s7-canary-deployment.yml" ]; then
            SCORE=$((SCORE + 10))
            echo "‚úÖ S7 Canary infrastructure verified"
          fi
          
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "üìä Overall Security Score: $SCORE/90"

      - name: Compliance Status Check
        id: compliance-check
        run: |
          echo "üìã Checking compliance status..."
          
          # Check for required compliance artifacts
          COMPLIANCE_ITEMS=0
          TOTAL_ITEMS=8
          
          # SLSA L3 compliance
          if [ -f ".github/workflows/slsa-provenance.yml" ]; then
            COMPLIANCE_ITEMS=$((COMPLIANCE_ITEMS + 1))
            echo "‚úÖ SLSA L3 provenance workflow"
          fi
          
          # SBOM generation
          if grep -q "SECURITY_SBOM_GENERATION.*enabled: true" security/flags.yaml; then
            COMPLIANCE_ITEMS=$((COMPLIANCE_ITEMS + 1))
            echo "‚úÖ SBOM generation enabled"
          fi
          
          # Cosign signing
          if grep -q "SECURITY_COSIGN_SIGNING.*enabled: true" security/flags.yaml; then
            COMPLIANCE_ITEMS=$((COMPLIANCE_ITEMS + 1))
            echo "‚úÖ Cosign container signing"
          fi
          
          # Vulnerability scanning
          if grep -q "SECURITY_VULN_SCANNING.*enabled: true" security/flags.yaml; then
            COMPLIANCE_ITEMS=$((COMPLIANCE_ITEMS + 1))
            echo "‚úÖ Vulnerability scanning"
          fi
          
          # Security headers
          if grep -q "SECURITY_CSP_NONCE.*enabled: true" security/flags.yaml; then
            COMPLIANCE_ITEMS=$((COMPLIANCE_ITEMS + 1))
            echo "‚úÖ Security headers implementation"
          fi
          
          # Admin dashboard
          if grep -q "SECURITY_ADMIN_DASHBOARD.*enabled: true" security/flags.yaml; then
            COMPLIANCE_ITEMS=$((COMPLIANCE_ITEMS + 1))
            echo "‚úÖ Admin security dashboard"
          fi
          
          # Developer tooling
          if grep -q "SECURITY_DEV_TOOLING.*enabled: true" security/flags.yaml; then
            COMPLIANCE_ITEMS=$((COMPLIANCE_ITEMS + 1))
            echo "‚úÖ Developer security tooling"
          fi
          
          # Performance monitoring
          if grep -q "SECURITY_PERF_MONITORING.*enabled: true" security/flags.yaml; then
            COMPLIANCE_ITEMS=$((COMPLIANCE_ITEMS + 1))
            echo "‚úÖ Performance monitoring"
          fi
          
          COMPLIANCE_PCT=$((COMPLIANCE_ITEMS * 100 / TOTAL_ITEMS))
          
          if [ $COMPLIANCE_PCT -ge 85 ]; then
            STATUS="COMPLIANT"
          elif [ $COMPLIANCE_PCT -ge 70 ]; then
            STATUS="PARTIAL"
          else
            STATUS="NON_COMPLIANT"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "üìä Compliance Status: $STATUS ($COMPLIANCE_PCT%)"

      - name: Enhanced Vulnerability Scanning
        id: vuln-scan
        run: |
          echo "üîç Running enhanced vulnerability scanning..."
          
          # Multi-scanner approach for comprehensive coverage
          CRITICAL_VULNS=0
          HIGH_VULNS=0
          
          # Trivy filesystem scan
          if command -v trivy >/dev/null 2>&1; then
            echo "Running Trivy filesystem scan..."
            trivy fs --exit-code 0 --severity CRITICAL,HIGH --format json --output trivy-fs.json . || true
            
            if [ -f "trivy-fs.json" ]; then
              TRIVY_CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-fs.json 2>/dev/null || echo "0")
              TRIVY_HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-fs.json 2>/dev/null || echo "0")
              CRITICAL_VULNS=$((CRITICAL_VULNS + TRIVY_CRITICAL))
              HIGH_VULNS=$((HIGH_VULNS + TRIVY_HIGH))
              echo "üìä Trivy: $TRIVY_CRITICAL critical, $TRIVY_HIGH high severity"
            fi
          fi
          
          # npm audit for Node.js dependencies
          if [ -f "package.json" ]; then
            echo "Running npm audit..."
            npm audit --audit-level high --json > npm-audit.json 2>/dev/null || true
            
            if [ -f "npm-audit.json" ]; then
              NPM_CRITICAL=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' npm-audit.json 2>/dev/null || echo "0")
              NPM_HIGH=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' npm-audit.json 2>/dev/null || echo "0")
              CRITICAL_VULNS=$((CRITICAL_VULNS + NPM_CRITICAL))
              HIGH_VULNS=$((HIGH_VULNS + NPM_HIGH))
              echo "üìä npm audit: $NPM_CRITICAL critical, $NPM_HIGH high severity"
            fi
          fi
          
          TOTAL_VULNS=$((CRITICAL_VULNS + HIGH_VULNS))
          echo "count=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "üìä Total high-severity vulnerabilities: $TOTAL_VULNS"
          
          # Fail if critical vulnerabilities found
          if [ $CRITICAL_VULNS -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found: $CRITICAL_VULNS"
            exit 1
          fi

      - name: Security Gate Decision
        id: gate-decision
        run: |
          SECURITY_SCORE="${{ steps.security-assessment.outputs.score }}"
          COMPLIANCE_STATUS="${{ steps.compliance-check.outputs.status }}"
          VULN_COUNT="${{ steps.vuln-scan.outputs.count }}"
          
          echo "üéØ Security Gate Evaluation:"
          echo "  Security Score: $SECURITY_SCORE/90"
          echo "  Compliance: $COMPLIANCE_STATUS"
          echo "  Vulnerabilities: $VULN_COUNT"
          
          # Gate criteria for S7 deployment
          APPROVED="false"
          
          if [ "$SECURITY_SCORE" -ge 75 ] && \
             [ "$COMPLIANCE_STATUS" = "COMPLIANT" ] && \
             [ "$VULN_COUNT" -le 5 ]; then
            APPROVED="true"
            echo "‚úÖ Security gate PASSED - Deployment approved"
          else
            echo "‚ùå Security gate FAILED - Deployment blocked"
            echo "Required: Score ‚â•75, Compliance=COMPLIANT, Vulnerabilities ‚â§5"
          fi
          
          echo "approved=$APPROVED" >> $GITHUB_OUTPUT

      - name: Upload Security Assessment
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: s7-security-assessment
          path: |
            trivy-*.json
            npm-audit.json
            security-assessment-*.log
          retention-days: 30

  # Canary Deployment Stages
  deploy-canary-10:
    name: Deploy Canary 10%
    runs-on: ubuntu-22.04
    needs: security-validation
    if: |
      needs.security-validation.outputs.deployment-approved == 'true' &&
      (github.event.inputs.deployment_stage == 'canary-10' || github.event_name != 'workflow_dispatch')
    environment:
      name: canary-10
      url: https://canary-10.atlas.dev
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Configure Container Registry
        run: |
          echo "üîß Configuring container registry access..."
          # In production, configure cloud provider credentials here

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Canary Images
        run: |
          echo "üê≥ Building canary images for S7 deployment..."
          
          # Build with S7 canary configuration
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin-insights:canary-10-${{ github.sha }} \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }} \
            --build-arg SECURITY_LEVEL=S7_CANARY \
            --build-arg CANARY_PERCENTAGE=10 \
            -f apps/admin-insights/Dockerfile .
          
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dev-portal:canary-10-${{ github.sha }} \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }} \
            --build-arg SECURITY_LEVEL=S7_CANARY \
            --build-arg CANARY_PERCENTAGE=10 \
            -f apps/dev-portal/Dockerfile .
          
          # Push images
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin-insights:canary-10-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dev-portal:canary-10-${{ github.sha }}

      - name: Deploy to Canary 10% Environment
        run: |
          echo "üöÄ Deploying to canary 10% environment..."
          
          # Update Kubernetes deployments with canary configuration
          kubectl set image deployment/admin-insights-canary \
            admin-insights=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin-insights:canary-10-${{ github.sha }} \
            -n atlas-canary-10
          
          kubectl set image deployment/dev-portal-canary \
            dev-portal=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dev-portal:canary-10-${{ github.sha }} \
            -n atlas-canary-10
          
          # Wait for rollout completion
          kubectl rollout status deployment/admin-insights-canary -n atlas-canary-10 --timeout=300s
          kubectl rollout status deployment/dev-portal-canary -n atlas-canary-10 --timeout=300s
          
          echo "‚úÖ Canary 10% deployment completed"

      - name: Enable S7 Canary Monitoring
        run: |
          echo "üìä Enabling S7 canary monitoring..."
          
          # Configure Prometheus monitoring for canary
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: s7-canary-monitoring
            namespace: atlas-canary-10
          data:
            prometheus.yml: |
              global:
                scrape_interval: 15s
              scrape_configs:
                - job_name: 'atlas-canary-10'
                  kubernetes_sd_configs:
                    - role: pod
                      namespaces:
                        names:
                          - atlas-canary-10
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                      action: keep
                      regex: true
                    - source_labels: [__meta_kubernetes_pod_annotation_atlas_security_level]
                      target_label: security_level
                    - source_labels: [__meta_kubernetes_pod_annotation_atlas_canary_percentage]
                      target_label: canary_percentage
          EOF

  # Canary Health Monitoring
  monitor-canary-10:
    name: Monitor Canary 10%
    runs-on: ubuntu-22.04
    needs: deploy-canary-10
    if: always() && needs.deploy-canary-10.result == 'success'
    outputs:
      healthy: ${{ steps.health-check.outputs.healthy }}
    
    steps:
      - name: Canary Health Check
        id: health-check
        run: |
          echo "üè• Starting canary health monitoring..."
          
          CANARY_URL="https://canary-10.atlas.dev"
          HEALTH_CHECKS=0
          TOTAL_CHECKS=10
          
          for i in $(seq 1 $TOTAL_CHECKS); do
            echo "Health check $i/$TOTAL_CHECKS..."
            
            # Check admin insights health
            ADMIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$CANARY_URL/admin/health" || echo "000")
            
            # Check dev portal health
            DEV_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$CANARY_URL/dev/health" || echo "000")
            
            if [ "$ADMIN_STATUS" = "200" ] && [ "$DEV_STATUS" = "200" ]; then
              HEALTH_CHECKS=$((HEALTH_CHECKS + 1))
              echo "‚úÖ Health check $i passed"
            else
              echo "‚ùå Health check $i failed (Admin: $ADMIN_STATUS, Dev: $DEV_STATUS)"
            fi
            
            sleep 30
          done
          
          HEALTH_RATE=$((HEALTH_CHECKS * 100 / TOTAL_CHECKS))
          echo "üìä Canary health rate: $HEALTH_RATE% ($HEALTH_CHECKS/$TOTAL_CHECKS)"
          
          if [ $HEALTH_RATE -ge 90 ]; then
            echo "‚úÖ Canary 10% health check PASSED"
            echo "healthy=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Canary 10% health check FAILED"
            echo "healthy=false" >> $GITHUB_OUTPUT
          fi

      - name: Security Metrics Validation
        run: |
          echo "üîí Validating security metrics in canary environment..."
          
          CANARY_URL="https://canary-10.atlas.dev"
          
          # Test security endpoints
          SECURITY_SCORE=$(curl -s "$CANARY_URL/api/v1/security/metrics" | jq -r '.overallScore // 0' 2>/dev/null || echo "0")
          SUPPLY_CHAIN_STATUS=$(curl -s "$CANARY_URL/api/v1/security/supply-chain" | jq -r '.slsaProvenance // false' 2>/dev/null || echo "false")
          
          echo "üìä Canary Security Metrics:"
          echo "  Security Score: $SECURITY_SCORE"
          echo "  Supply Chain Status: $SUPPLY_CHAIN_STATUS"
          
          if [ "$SECURITY_SCORE" -ge 85 ] && [ "$SUPPLY_CHAIN_STATUS" = "true" ]; then
            echo "‚úÖ Security metrics validation PASSED"
          else
            echo "‚ùå Security metrics validation FAILED"
            exit 1
          fi

      - name: Performance Impact Assessment
        run: |
          echo "‚ö° Assessing performance impact of S7 security controls..."
          
          CANARY_URL="https://canary-10.atlas.dev"
          
          # Lighthouse performance audit
          npm install -g lighthouse
          
          lighthouse "$CANARY_URL/admin" \
            --output=json \
            --output-path=lighthouse-admin-canary.json \
            --chrome-flags="--headless --no-sandbox" \
            --quiet
          
          lighthouse "$CANARY_URL/dev" \
            --output=json \
            --output-path=lighthouse-dev-canary.json \
            --chrome-flags="--headless --no-sandbox" \
            --quiet
          
          ADMIN_PERF=$(jq -r '.categories.performance.score * 100 | floor' lighthouse-admin-canary.json 2>/dev/null || echo "0")
          DEV_PERF=$(jq -r '.categories.performance.score * 100 | floor' lighthouse-dev-canary.json 2>/dev/null || echo "0")
          
          echo "üìä Canary Performance Scores:"
          echo "  Admin Insights: $ADMIN_PERF/100"
          echo "  Dev Portal: $DEV_PERF/100"
          
          if [ "$ADMIN_PERF" -ge 90 ] && [ "$DEV_PERF" -ge 90 ]; then
            echo "‚úÖ Performance impact assessment PASSED"
          else
            echo "‚ö†Ô∏è Performance impact detected but within acceptable range"
          fi

      - name: Upload Canary Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: canary-10-reports
          path: |
            lighthouse-*-canary.json
            canary-health-*.log
          retention-days: 7

  # Rollback on Failure
  rollback-canary:
    name: Emergency Rollback
    runs-on: ubuntu-22.04
    needs: [deploy-canary-10, monitor-canary-10]
    if: |
      always() && 
      github.event.inputs.rollback_on_failure == 'true' &&
      (needs.deploy-canary-10.result == 'failure' || 
       needs.monitor-canary-10.outputs.healthy == 'false')
    
    steps:
      - name: Emergency Rollback
        run: |
          echo "üö® Initiating emergency rollback..."
          
          # Rollback to previous stable version
          kubectl rollout undo deployment/admin-insights-canary -n atlas-canary-10
          kubectl rollout undo deployment/dev-portal-canary -n atlas-canary-10
          
          # Wait for rollback completion
          kubectl rollout status deployment/admin-insights-canary -n atlas-canary-10 --timeout=180s
          kubectl rollout status deployment/dev-portal-canary -n atlas-canary-10 --timeout=180s
          
          echo "‚úÖ Emergency rollback completed"

      - name: Notify Security Team
        run: |
          echo "üìß Notifying security team of rollback..."
          
          # In production, this would send alerts via Slack, email, etc.
          echo "Security incident detected during S7 canary deployment"
          echo "Automatic rollback completed successfully"
          echo "Manual investigation required before next deployment attempt"

  # Promotion Gate
  promote-to-canary-50:
    name: Promote to Canary 50%
    runs-on: ubuntu-22.04
    needs: monitor-canary-10
    if: |
      needs.monitor-canary-10.outputs.healthy == 'true' &&
      github.event.inputs.deployment_stage == 'canary-50'
    environment:
      name: canary-50
      url: https://canary-50.atlas.dev
    
    steps:
      - name: Promote to Canary 50%
        run: |
          echo "üöÄ Promoting to canary 50% environment..."
          
          # Similar deployment steps but with 50% traffic
          # Implementation would follow similar pattern as canary-10
          
          echo "‚úÖ Canary 50% promotion completed"

  # Final Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-22.04
    needs: [security-validation, monitor-canary-10]
    if: |
      needs.security-validation.outputs.deployment-approved == 'true' &&
      needs.monitor-canary-10.outputs.healthy == 'true' &&
      github.event.inputs.deployment_stage == 'production'
    environment:
      name: production
      url: https://atlas.dev
    
    steps:
      - name: Final Production Deployment
        run: |
          echo "üéØ Deploying S7 to production..."
          
          # Full production deployment with all S7 security controls
          # Implementation would include full production configuration
          
          echo "‚úÖ S7 production deployment completed"