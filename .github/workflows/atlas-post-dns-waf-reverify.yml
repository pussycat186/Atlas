name: Atlas Post DNS WAF Reverify

on:
  workflow_dispatch:
    inputs:
      admin_public:
        description: 'Admin public URL (via Cloudflare Worker)'
        required: true
        default: 'https://atlas-proxy.example.com'

jobs:
  reverify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/setup-k6-action@v1
      
      - name: Setup
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          
      - name: Verify Headers
        env:
          ADMIN_ORIGIN: https://atlas-admin-insights.vercel.app
          ADMIN_PUBLIC: ${{ github.event.inputs.admin_public }}
        run: |
          echo "=== Verifying headers on $ADMIN_PUBLIC ==="
          
          # Check /prism
          PRISM_HEADERS=$(curl -sI "$ADMIN_PUBLIC/prism" | grep -i 'cdn-cache-control\|vercel-cdn-cache-control\|cf-cache-status' || echo "NO_CACHE_HEADERS")
          echo "Prism headers: $PRISM_HEADERS"
          
          # Check /qtca/tick
          TICK_HEADERS=$(curl -sI "$ADMIN_PUBLIC/qtca/tick" | grep -i 'cdn-cache-control\|vercel-cdn-cache-control\|cf-cache-status' || echo "NO_CACHE_HEADERS")
          echo "Tick headers: $TICK_HEADERS"
          
          if [[ "$PRISM_HEADERS" == "NO_CACHE_HEADERS" ]] || [[ "$TICK_HEADERS" == "NO_CACHE_HEADERS" ]]; then
            echo "BLOCKER_CACHE_MISS"
            exit 1
          fi
          
      - name: K6 Performance Test
        env:
          ADMIN_PUBLIC: ${{ github.event.inputs.admin_public }}
        run: |
          TS=$(date -u +%Y%m%d-%H%M)
          mkdir -p docs/evidence/$TS/k6
          
          cat > tests/k6/reverify-test.js <<'JS'
          import http from 'k6/http';
          import { check } from 'k6';
          export const options = {
            vus: 60, duration: '60s',
            thresholds: { http_req_duration: ['p(95)<200'], http_req_failed: ['rate<0.01'] }
          };
          export default function() {
            const r = http.get(`${__ENV.BASE}/prism`);
            check(r, { ok: (res) => res.status === 200 });
          }
          JS
          
          BASE="$ADMIN_PUBLIC" k6 run tests/k6/reverify-test.js --summary-export=docs/evidence/$TS/k6/summary.json || {
            echo "K6 test failed"
          }
          
          P95=$(jq '.metrics.http_req_duration["p(95)"]' docs/evidence/$TS/k6/summary.json 2>/dev/null || echo "999")
          ERR=$(jq '.metrics.http_req_failed.rate*100' docs/evidence/$TS/k6/summary.json 2>/dev/null || echo "100")
          
          echo "Results: p95=${P95}ms, error=${ERR}%"
          
          if awk "BEGIN{exit !($P95<200 && $ERR<1)}"; then
            jq -n --arg endpoint "$ADMIN_PUBLIC" --argjson p95 "$P95" --argjson err "$ERR" --arg ev "docs/evidence/$TS/k6/" \
              '{"status":"PERF_OK","endpoint":$endpoint,"k6":{"p95_ms":$p95,"error_pct":$err},"evidence":$ev}'
          else
            if awk "BEGIN{exit !($ERR>10)}"; then
              echo "BLOCKER_INFRA_LIMITS:VERCEL_RATE_LIMIT"
            else
              echo "BLOCKER_PERF_GATE:p95=$P95 error=$ERR"
            fi
            exit 1
          fi