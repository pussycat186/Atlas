name: Atlas Rate Limit Mitigation Retest

on:
  workflow_dispatch:

jobs:
  rate-limit-mitigation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/setup-k6-action@v1
      
      - name: Setup
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          
      - name: WAF Permission Check
        run: |
          echo "BLOCKER_MISSING_PERMISSION:WAF - Dashboard access required for WAF rule modification"
          echo "Manual action needed: Increase rate limits in Vercel dashboard for /prism and /qtca/* endpoints"
          
      - name: CDN Caching Verify
        env:
          ADMIN: https://atlas-admin-insights.vercel.app
        run: |
          echo "=== Checking CDN cache headers ==="
          
          # Check /prism
          PRISM_HEADERS=$(curl -sI "$ADMIN/prism" | grep -i 'cdn-cache-control\|vercel-cdn-cache-control' || echo "NO_CDN_HEADERS")
          echo "Prism CDN headers: $PRISM_HEADERS"
          
          # Check /qtca/tick
          TICK_HEADERS=$(curl -sI "$ADMIN/qtca/tick" | grep -i 'cdn-cache-control\|vercel-cdn-cache-control' || echo "NO_CDN_HEADERS")
          echo "Tick CDN headers: $TICK_HEADERS"
          
          # Check /qtca/summary
          SUMMARY_HEADERS=$(curl -sI "$ADMIN/qtca/summary" | grep -i 'cdn-cache-control\|vercel-cdn-cache-control' || echo "NO_CDN_HEADERS")
          echo "Summary CDN headers: $SUMMARY_HEADERS"
          
          if [[ "$TICK_HEADERS" == "NO_CDN_HEADERS" ]] || [[ "$SUMMARY_HEADERS" == "NO_CDN_HEADERS" ]]; then
            echo "BLOCKER_CACHE_MISS"
            exit 1
          fi
          
      - name: Cloudflare Worker Proxy Template
        run: |
          cat > cloudflare-worker.js <<'JS'
          export default {
            async fetch(request, env, ctx) {
              const url = new URL(request.url);
              
              // Only handle GET requests to specific paths
              if (request.method !== 'GET') {
                return fetch(request);
              }
              
              const path = url.pathname;
              if (!path.startsWith('/prism') && !path.startsWith('/qtca/tick') && !path.startsWith('/qtca/summary')) {
                return fetch(request);
              }
              
              // Skip SSE stream
              if (path.includes('/qtca/stream')) {
                return fetch(request);
              }
              
              // Create cache key
              const cacheKey = new Request(url.toString(), request);
              const cache = caches.default;
              
              // Try cache first
              let response = await cache.match(cacheKey);
              if (response) {
                response.headers.set('X-CF-Cache', 'HIT');
                return response;
              }
              
              // Forward to Vercel
              const vercelUrl = url.toString().replace(url.origin, 'https://atlas-admin-insights.vercel.app');
              const vercelRequest = new Request(vercelUrl, {
                method: request.method,
                headers: request.headers,
                body: request.body
              });
              
              response = await fetch(vercelRequest);
              
              // Cache successful responses for 600s
              if (response.status === 200) {
                const responseClone = response.clone();
                responseClone.headers.set('Cache-Control', 'public, max-age=600, stale-while-revalidate=60');
                responseClone.headers.set('X-CF-Cache', 'MISS');
                ctx.waitUntil(cache.put(cacheKey, responseClone));
              }
              
              return response;
            }
          };
          JS
          
          echo "Cloudflare Worker template created"
          echo "Manual deployment steps:"
          echo "1. Deploy worker.js to Cloudflare Workers"
          echo "2. Set custom domain (e.g., atlas-cf.example.com)"
          echo "3. Update DNS CNAME to point to worker domain"
          echo "4. Test with: curl -sI https://atlas-cf.example.com/prism"
          
      - name: K6 Threshold Test
        env:
          ADMIN: https://atlas-admin-insights.vercel.app
        run: |
          TS=$(date -u +%Y%m%d-%H%M)
          mkdir -p docs/evidence/$TS/k6
          
          cat > tests/k6/threshold-test.js <<'JS'
          import http from 'k6/http';
          import { check } from 'k6';
          export const options = {
            vus: 60, duration: '60s',
            thresholds: { http_req_duration: ['p(95)<200'], http_req_failed: ['rate<0.01'] }
          };
          export default function() {
            const r = http.get(`${__ENV.BASE}/prism`);
            check(r, { ok: (res) => res.status === 200 });
          }
          JS
          
          BASE="$ADMIN" k6 run tests/k6/threshold-test.js --summary-export=docs/evidence/$TS/k6/summary.json || {
            echo "K6 test failed, checking error patterns"
          }
          
          P95=$(jq '.metrics.http_req_duration["p(95)"]' docs/evidence/$TS/k6/summary.json 2>/dev/null || echo "999")
          ERR=$(jq '.metrics.http_req_failed.rate*100' docs/evidence/$TS/k6/summary.json 2>/dev/null || echo "100")
          
          echo "Results: p95=${P95}ms, error=${ERR}%"
          
          if awk "BEGIN{exit !($P95<200 && $ERR<1)}"; then
            jq -n --argjson p95 "$P95" --argjson err "$ERR" --arg ev "docs/evidence/$TS/k6/" \
              '{"status":"PERF_OK","k6":{"p95_ms":$p95,"error_pct":$err},"evidence":$ev}'
          else
            echo "BLOCKER_INFRA_LIMITS:VERCEL_RATE_LIMIT"
            exit 1
          fi