name: ATLAS Secrets Rotation

on:
  schedule:
    - cron: '0 0 1 */3 *'  # Every 90 days (1st of month, quarterly)
  workflow_dispatch:
    inputs:
      force_rotation:
        description: 'Force immediate rotation (testing only)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  issues: write

jobs:
  rotation_reminder:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check Last Rotation Date
        id: check_date
        run: |
          # Check if rotation log exists
          if [[ -f "docs/secrets-rotation-log.md" ]]; then
            LAST_ROTATION=$(grep -oP '(?<=Last Rotation: )\d{4}-\d{2}-\d{2}' docs/secrets-rotation-log.md | head -n1 || echo "1970-01-01")
          else
            LAST_ROTATION="1970-01-01"
          fi
          
          LAST_EPOCH=$(date -d "$LAST_ROTATION" +%s)
          NOW_EPOCH=$(date +%s)
          DAYS_SINCE=$(( (NOW_EPOCH - LAST_EPOCH) / 86400 ))
          
          echo "last_rotation=$LAST_ROTATION" >> $GITHUB_OUTPUT
          echo "days_since=$DAYS_SINCE" >> $GITHUB_OUTPUT
          
          if [[ $DAYS_SINCE -ge 90 ]] || [[ "${{ github.event.inputs.force_rotation }}" == "true" ]]; then
            echo "rotation_due=true" >> $GITHUB_OUTPUT
          else
            echo "rotation_due=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Rotation Checklist
        if: steps.check_date.outputs.rotation_due == 'true'
        id: checklist
        run: |
          TS=$(date -u +%Y%m%d-%H%M%S)
          
          cat > rotation_checklist.md <<'EOF'
          # Secrets Rotation Checklist
          
          **Rotation Date:** {TIMESTAMP}
          **Last Rotation:** {LAST_ROTATION} ({DAYS_SINCE} days ago)
          
          ## Required Actions
          
          ### 1. Vercel Secrets
          - [ ] Generate new `VERCEL_TOKEN` in Vercel dashboard
          - [ ] Update GitHub secret: `VERCEL_TOKEN`
          - [ ] Verify new token in test workflow
          - [ ] Revoke old token in Vercel dashboard
          
          ### 2. Cloudflare Secrets
          - [ ] Generate new `CLOUDFLARE_API_TOKEN` in Cloudflare dashboard
          - [ ] Update GitHub secret: `CLOUDFLARE_API_TOKEN`
          - [ ] Verify new token with API test
          - [ ] Revoke old token in Cloudflare dashboard
          
          ### 3. JWKS Rotation (Server Signing Keys)
          - [ ] Generate new EdDSA key pair
          - [ ] Add new key to JWKS with new `kid`
          - [ ] Deploy updated JWKS to `/.well-known/jwks.json`
          - [ ] Wait 24 hours (grace period for client cache expiry)
          - [ ] Mark old key as deprecated (but keep in JWKS)
          - [ ] Remove old key after 60 days
          
          ### 4. Optional Secrets (if configured)
          - [ ] `FIGMA_TOKEN` (if using Figma integration)
          - [ ] `FIGMA_FILE_KEY` (if using Figma integration)
          
          ### 5. Verification
          - [ ] Run integration tests with new secrets
          - [ ] Verify deployments succeed
          - [ ] Check JWKS endpoint returns new keys
          - [ ] Monitor error rates for 24 hours
          
          ### 6. Documentation
          - [ ] Update `docs/secrets-rotation-log.md` with rotation date
          - [ ] Document any issues encountered
          - [ ] Close this issue when complete
          
          ## Automated Checks
          
          This workflow will automatically verify:
          - JWKS endpoint health
          - Deployment pipeline (with new secrets)
          - Receipt verification (with new JWKS)
          
          ## Timeline
          
          - **Day 0**: Rotate secrets (this checklist)
          - **Day 1**: Monitor error rates and performance
          - **Day 7**: Final verification, deprecate old JWKS keys
          - **Day 60**: Remove old JWKS keys from public endpoint
          
          ## Rollback Plan
          
          If issues arise:
          1. Revert GitHub secrets to previous values
          2. Re-deploy applications
          3. Investigate root cause
          4. Retry rotation after fix
          
          ---
          
          **Assigned To:** Platform Team  
          **Due Date:** Within 7 days  
          **Priority:** High
          EOF
          
          sed -i "s/{TIMESTAMP}/$(date -u +%Y-%m-%d)/g" rotation_checklist.md
          sed -i "s/{LAST_ROTATION}/${{ steps.check_date.outputs.last_rotation }}/g" rotation_checklist.md
          sed -i "s/{DAYS_SINCE}/${{ steps.check_date.outputs.days_since }}/g" rotation_checklist.md
          
          echo "checklist_created=true" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Issue
        if: steps.checklist.outputs.checklist_created == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const checklist = fs.readFileSync('rotation_checklist.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[SECRETS-ROTATION] Quarterly secrets rotation due',
              body: checklist,
              labels: ['security', 'secrets-rotation', 'high-priority']
            });
      
      - name: Verify JWKS Health
        if: always()
        run: |
          JWKS_URL="https://atlas-proof-messenger.vercel.app/.well-known/jwks.json"
          
          echo "Checking JWKS endpoint: $JWKS_URL"
          RESPONSE=$(curl -s "$JWKS_URL" || echo '{"error":"failed"}')
          
          if echo "$RESPONSE" | jq -e '.keys' >/dev/null 2>&1; then
            KEY_COUNT=$(echo "$RESPONSE" | jq '.keys | length')
            echo "✅ JWKS endpoint healthy ($KEY_COUNT keys)"
            
            # Check for deprecated keys (older than 60 days)
            CURRENT_TIME=$(date +%s)
            echo "$RESPONSE" | jq -r '.keys[] | [.kid, .iat] | @tsv' | while read KID IAT; do
              if [[ -n "$IAT" ]]; then
                KEY_AGE=$(( (CURRENT_TIME - IAT) / 86400 ))
                if [[ $KEY_AGE -gt 60 ]]; then
                  echo "⚠️ Key $KID is $KEY_AGE days old (consider removing)"
                fi
              fi
            done
          else
            echo "❌ JWKS endpoint failed or malformed"
            exit 1
          fi
      
      - name: Update Rotation Log
        if: steps.checklist.outputs.checklist_created == 'true'
        run: |
          mkdir -p docs
          
          if [[ ! -f "docs/secrets-rotation-log.md" ]]; then
            cat > docs/secrets-rotation-log.md <<'EOF'
          # Secrets Rotation Log
          
          This file tracks all secrets rotation events for the ATLAS platform.
          
          ## Rotation Schedule
          
          - **Frequency**: Every 90 days
          - **Scope**: All GitHub secrets, JWKS server keys
          - **Process**: Automated reminder via GitHub Actions
          
          ## Rotation History
          
          EOF
          fi
          
          echo "" >> docs/secrets-rotation-log.md
          echo "### Rotation Initiated: $(date -u +%Y-%m-%d)" >> docs/secrets-rotation-log.md
          echo "- **Status**: Pending (see GitHub Issues)" >> docs/secrets-rotation-log.md
          echo "- **Days Since Last Rotation**: ${{ steps.check_date.outputs.days_since }}" >> docs/secrets-rotation-log.md
          echo "- **Automated Issue Created**: Yes" >> docs/secrets-rotation-log.md
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add docs/secrets-rotation-log.md
          git diff --staged --quiet || git commit -m "chore(security): Log secrets rotation reminder $(date -u +%Y%m%d)"
          git push origin main || echo "No changes to push"
