name: Deploy to Cloud Run
on:
  workflow_dispatch:
  push:
    branches: [ main ]
permissions:
  contents: write
  id-token: write

concurrency:
  group: atlas-cloudrun
  cancel-in-progress: true

env:
  APP_MATRIX: >-
    [{"name":"admin_insights","path":"apps/admin-insights","svc":"atlas-admin-insights"},
     {"name":"dev_portal","path":"apps/dev-portal","svc":"atlas-dev-portal"},
     {"name":"proof_messenger","path":"apps/proof-messenger","svc":"atlas-proof-messenger"}]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Gate: all required secrets must exist. Print EXACT one line then fail.
      - name: Gate secrets
        shell: bash
        env:
          GH_ADMIN_TOKEN:           ${{ secrets.GH_ADMIN_TOKEN }}
          GCP_PROJECT_ID:           ${{ secrets.GCP_PROJECT_ID }}
          GCP_PROJECT_NUMBER:       ${{ secrets.GCP_PROJECT_NUMBER }}
          GCP_REGION:               ${{ secrets.GCP_REGION }}
          GCP_WORKLOAD_ID_PROVIDER: ${{ secrets.GCP_WORKLOAD_ID_PROVIDER }}
          GCP_DEPLOYER_SA:          ${{ secrets.GCP_DEPLOYER_SA }}
          ARTIFACT_REPO:            ${{ secrets.ARTIFACT_REPO }}
          DOMAINS_JSON:             ${{ secrets.DOMAINS_JSON }}
        run: |
          miss=()
          for k in GH_ADMIN_TOKEN GCP_PROJECT_ID GCP_PROJECT_NUMBER GCP_REGION GCP_WORKLOAD_ID_PROVIDER GCP_DEPLOYER_SA ARTIFACT_REPO DOMAINS_JSON; do
            [ -z "${!k}" ] && miss+=("$k")
          done
          if [ ${#miss[@]} -gt 0 ]; then
            echo "READY_NO_SECRETS:[${miss[*]}]"
            exit 1
          fi

      # Auth to GCP via OIDC (NO JSON KEY)
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_ID_PROVIDER }}
          service_account:            ${{ secrets.GCP_DEPLOYER_SA }}

      - uses: google-github-actions/setup-gcloud@v2

      - uses: docker/setup-buildx-action@v3

      - name: Configure Artifact Registry Docker
        run: gcloud auth configure-docker "${{ secrets.GCP_REGION }}-docker.pkg.dev" --quiet

      - name: Build & Push images (all apps)
        id: buildpush
        shell: bash
        env:
          REGION: ${{ secrets.GCP_REGION }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          ARTIFACT_REPO: ${{ secrets.ARTIFACT_REPO }}
          MATRIX: ${{ env.APP_MATRIX }}
        run: |
          set -euo pipefail
          echo "$MATRIX" | jq -c '.[]' | while read -r app; do
            name=$(jq -r '.name' <<<"$app")
            path=$(jq -r '.path' <<<"$app")
            svc=$(jq -r  '.svc'  <<<"$app")
            image="${REGION}-docker.pkg.dev/${PROJECT_ID}/${ARTIFACT_REPO}/${svc}:${GITHUB_SHA}"
            echo "::group::Build $name â†’ $image"
            docker build -t "$image" "$path"
            docker push "$image"
            printf '%s\n' "$svc $image" >> images.txt
            echo "::endgroup::"
          done
          echo "images<<EOF" >> $GITHUB_OUTPUT
          cat images.txt        >> $GITHUB_OUTPUT
          echo "EOF"            >> $GITHUB_OUTPUT

      - name: Deploy to Cloud Run (canary 100% first deploy)
        id: deploy
        shell: bash
        env:
          REGION: ${{ secrets.GCP_REGION }}
        run: |
          set -euo pipefail
          while read -r line; do
            svc=$(awk '{print $1}' <<<"$line")
            img=$(awk '{print $2}' <<<"$line")
            echo "::group::Deploy $svc"
            gcloud run deploy "$svc" \
              --image "$img" --region "$REGION" --platform managed \
              --allow-unauthenticated --port 8080 \
              --min-instances 1 --max-instances 50 --concurrency 80
            url=$(gcloud run services describe "$svc" --region "$REGION" --format='value(status.url)')
            printf '%s\n' "$svc $img $url" >> deploy.txt
            echo "::endgroup::"
          done < <(printf '%s\n' "${{ steps.buildpush.outputs.images }}")
          echo "deploy<<EOF" >> $GITHUB_OUTPUT
          cat deploy.txt          >> $GITHUB_OUTPUT
          echo "EOF"              >> $GITHUB_OUTPUT

      - name: Evidence
        shell: bash
        run: |
          ts=$(date -u +%Y%m%d-%H%M)
          dir="docs/evidence/gcp-ci/${ts}"
          mkdir -p "$dir"
          jq -Rn '[inputs|split(" ")]|map({svc:.[0],image:.[1],url:.[2]})' <<< "${{ steps.deploy.outputs.deploy }}" > "${dir}/S3_deploy.json"
          git config user.name  "atlas-ci"
          git config user.email "ops@atlas"
          git add "$dir" || true
          git commit -m "evidence(gcp-ci): S3 deploy ${ts}" || true
          git push || true

      - name: Done
        run: echo "GCP_MIGRATION_DONE"
