name: Supply Chain Security

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write

jobs:
  supply-chain:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build applications
        run: pnpm run build

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft version

      - name: Generate SBOM
        run: |
          syft packages . -o spdx-json > _reports/SBOM.spdx
          echo "SBOM generated: $(ls -lh _reports/SBOM.spdx)"

      - name: Install cosign
        run: |
          curl -L https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/
          cosign version

      - name: Create build artifact
        run: |
          tar -czf atlas-build-artifact.tar.gz services/ packages/ apps/ _reports/
          echo "Build artifact created: $(ls -lh atlas-build-artifact.tar.gz)"

      - name: Sign artifact with cosign keyless
        run: |
          cosign sign-blob --bundle cosign.bundle --yes atlas-build-artifact.tar.gz
          echo "Artifact signed successfully"

      - name: Verify signature
        run: |
          cosign verify-blob --bundle cosign.bundle atlas-build-artifact.tar.gz > COSIGN_VERIFY.txt
          echo "Signature verification completed"
          cat COSIGN_VERIFY.txt

      - name: Create SBOM attestation
        run: |
          cosign attest --predicate _reports/SBOM.spdx --type spdxjson --bundle sbom-attestation.bundle --yes atlas-build-artifact.tar.gz
          echo "SBOM attestation created"

      - name: Verify SBOM attestation
        run: |
          cosign verify-attestation --bundle sbom-attestation.bundle atlas-build-artifact.tar.gz > COSIGN_ATTEST_VERIFY.txt
          echo "SBOM attestation verification completed"
          cat COSIGN_ATTEST_VERIFY.txt

      - name: Generate SLSA provenance
        run: |
          # Create a basic SLSA v3 provenance document
          cat > SLSA_PROVENANCE.json << EOF
          {
            "_type": "https://in-toto.io/Statement/v1",
            "predicateType": "https://slsa.dev/provenance/v1",
            "subject": [
              {
                "name": "atlas-build-artifact.tar.gz",
                "digest": {
                  "sha256": "$(sha256sum atlas-build-artifact.tar.gz | cut -d' ' -f1)"
                }
              }
            ],
            "predicate": {
              "buildType": "https://github.com/slsa-framework/slsa-github-generator@v1.9.0",
              "builder": {
                "id": "https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0"
              },
              "buildConfig": {
                "source": {
                  "uri": "git+https://github.com/${{ github.repository }}@${{ github.ref_name }}",
                  "digest": {
                    "sha1": "${{ github.sha }}"
                  }
                }
              },
              "metadata": {
                "buildInvocationId": "${{ github.run_id }}",
                "buildStartedOn": "${{ github.event.head_commit.timestamp }}",
                "buildFinishedOn": "${{ github.event.head_commit.timestamp }}",
                "completeness": {
                  "parameters": true,
                  "environment": true,
                  "materials": true
                },
                "reproducible": false
              },
              "materials": [
                {
                  "uri": "git+https://github.com/${{ github.repository }}@${{ github.ref_name }}",
                  "digest": {
                    "sha1": "${{ github.sha }}"
                  }
                }
              ]
            }
          }
          EOF
          echo "SLSA provenance generated"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: supply-chain-artifacts
          path: |
            atlas-build-artifact.tar.gz
            _reports/SBOM.spdx
            cosign.bundle
            sbom-attestation.bundle
            COSIGN_VERIFY.txt
            COSIGN_ATTEST_VERIFY.txt
            SLSA_PROVENANCE.json

      - name: Set tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Atlas ${{ steps.tag.outputs.tag }}
          files: |
            atlas-build-artifact.tar.gz
            _reports/SBOM.spdx
            cosign.bundle
            sbom-attestation.bundle
            COSIGN_VERIFY.txt
            COSIGN_ATTEST_VERIFY.txt
            SLSA_PROVENANCE.json
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}