name: Deploy Frontends (Direct)

on:
  workflow_dispatch:
    inputs:
      message:
        description: 'Deployment message'
        required: false
        default: 'Deploy stub pages'

jobs:
  deploy-frontends:
    runs-on: ubuntu-latest
    outputs:
      proof_messenger_url: ${{ steps.deploy.outputs.proof_messenger_url }}
      admin_insights_url: ${{ steps.deploy.outputs.admin_insights_url }}
      dev_portal_url: ${{ steps.deploy.outputs.dev_portal_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
        
    - name: Build applications
      run: |
        # Build proof-messenger
        echo "Building proof-messenger..."
        cd apps/proof-messenger
        pnpm build
        cd ../..
        
        # Build admin-insights
        echo "Building admin-insights..."
        cd apps/admin-insights
        pnpm build
        cd ../..
        
        # Build dev-portal
        echo "Building dev-portal..."
        cd apps/dev-portal
        pnpm build
        cd ../..
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Deploy applications
      id: deploy
      run: |
        # Deploy proof-messenger
        echo "Deploying proof-messenger..."
        cd apps/proof-messenger
        vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        vercel build --cwd . --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod
        PROOF_URL=$(vercel deploy --prebuilt --cwd . --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod --yes)
        echo "proof_messenger_url=$PROOF_URL" >> $GITHUB_OUTPUT
        cd ../..
        
        # Deploy admin-insights
        echo "Deploying admin-insights..."
        cd apps/admin-insights
        vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        vercel build --cwd . --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod
        INSIGHTS_URL=$(vercel deploy --prebuilt --cwd . --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod --yes)
        echo "admin_insights_url=$INSIGHTS_URL" >> $GITHUB_OUTPUT
        cd ../..
        
        # Deploy dev-portal
        echo "Deploying dev-portal..."
        cd apps/dev-portal
        vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        vercel build --cwd . --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod
        DEVPORTAL_URL=$(vercel deploy --prebuilt --cwd . --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod --yes)
        echo "dev_portal_url=$DEVPORTAL_URL" >> $GITHUB_OUTPUT
        cd ../..
        
    - name: Verify deployments
      run: |
        echo "Verifying deployments..."
        
        # Verify proof-messenger
        if [ -n "${{ steps.deploy.outputs.proof_messenger_url }}" ]; then
          echo "Checking proof-messenger at ${{ steps.deploy.outputs.proof_messenger_url }}"
          curl -f -s "${{ steps.deploy.outputs.proof_messenger_url }}" > /dev/null || {
            echo "❌ proof-messenger deployment failed health check"
            exit 1
          }
          echo "✅ proof-messenger is healthy"
        fi
        
        # Verify admin-insights
        if [ -n "${{ steps.deploy.outputs.admin_insights_url }}" ]; then
          echo "Checking admin-insights at ${{ steps.deploy.outputs.admin_insights_url }}"
          curl -f -s "${{ steps.deploy.outputs.admin_insights_url }}" > /dev/null || {
            echo "❌ admin-insights deployment failed health check"
            exit 1
          }
          echo "✅ admin-insights is healthy"
        fi
        
        # Verify dev-portal
        if [ -n "${{ steps.deploy.outputs.dev_portal_url }}" ]; then
          echo "Checking dev-portal at ${{ steps.deploy.outputs.dev_portal_url }}"
          curl -f -s "${{ steps.deploy.outputs.dev_portal_url }}" > /dev/null || {
            echo "❌ dev-portal deployment failed health check"
            exit 1
          }
          echo "✅ dev-portal is healthy"
        fi
        
    - name: Generate LIVE_URLS.json
      run: |
        cat > LIVE_URLS.json << EOF
        {
          "status": "LIVE",
          "tag": "manual-deploy-$(date +%Y%m%d-%H%M)",
          "frontends": {
            "proof_messenger": "${{ steps.deploy.outputs.proof_messenger_url }}",
            "admin_insights": "${{ steps.deploy.outputs.admin_insights_url }}",
            "dev_portal": "${{ steps.deploy.outputs.dev_portal_url }}"
          },
          "backends": {
            "gateway": "https://atlas-gateway.sonthenguyen186.workers.dev",
            "quantum_sync": "https://atlas-quantum-sync.sonthenguyen186.workers.dev"
          }
        }
        EOF
        
        echo "Generated LIVE_URLS.json:"
        cat LIVE_URLS.json
        
    - name: Upload LIVE_URLS.json
      uses: actions/upload-artifact@v4
      with:
        name: live-urls-frontends
        path: LIVE_URLS.json
