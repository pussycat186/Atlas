name: ATLAS Secrets Audit
on:
  workflow_dispatch:
  push:
    branches: [main]
  schedule:
    - cron: '0 6 * * *'  # Daily audit at 6 AM UTC

jobs:
  secrets-audit:
    runs-on: ubuntu-latest
    outputs:
      audit-status: ${{ steps.audit.outputs.status }}
      missing-secrets: ${{ steps.audit.outputs.missing }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Comprehensive Secrets Audit
        id: audit
        run: |
          echo "🔍 ATLAS_PERFECT_MODE_CLOSEOUT - Secrets Audit"
          echo "========================================"
          
          # Required secrets for PERFECT_LIVE status
          REQUIRED_SECRETS=(
            "VERCEL_TOKEN"
            "VERCEL_ORG_ID" 
            "VERCEL_PROJECT_ID_ADMIN_INSIGHTS"
            "VERCEL_PROJECT_ID_DEV_PORTAL"
            "VERCEL_PROJECT_ID_PROOF_MESSENGER"
            "CLOUDFLARE_ACCOUNT_ID"
            "CLOUDFLARE_API_TOKEN"
          )
          
          MISSING_SECRETS=()
          ALL_PRESENT=true
          
          echo "📋 Checking required secrets..."
          for secret in "${REQUIRED_SECRETS[@]}"; do
            case $secret in
              "VERCEL_TOKEN")
                if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
                  echo "❌ $secret: MISSING"
                  MISSING_SECRETS+=("$secret")
                  ALL_PRESENT=false
                else
                  echo "✅ $secret: PRESENT"
                fi
                ;;
              "VERCEL_ORG_ID")
                if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
                  echo "❌ $secret: MISSING"
                  MISSING_SECRETS+=("$secret")
                  ALL_PRESENT=false
                else
                  echo "✅ $secret: PRESENT"
                fi
                ;;
              "VERCEL_PROJECT_ID_ADMIN_INSIGHTS")
                if [ -z "${{ secrets.VERCEL_PROJECT_ID_ADMIN_INSIGHTS }}" ]; then
                  echo "❌ $secret: MISSING"
                  MISSING_SECRETS+=("$secret")
                  ALL_PRESENT=false
                else
                  echo "✅ $secret: PRESENT"
                fi
                ;;
              "VERCEL_PROJECT_ID_DEV_PORTAL")
                if [ -z "${{ secrets.VERCEL_PROJECT_ID_DEV_PORTAL }}" ]; then
                  echo "❌ $secret: MISSING"
                  MISSING_SECRETS+=("$secret")
                  ALL_PRESENT=false
                else
                  echo "✅ $secret: PRESENT"
                fi
                ;;
              "VERCEL_PROJECT_ID_PROOF_MESSENGER")
                if [ -z "${{ secrets.VERCEL_PROJECT_ID_PROOF_MESSENGER }}" ]; then
                  echo "❌ $secret: MISSING"
                  MISSING_SECRETS+=("$secret")
                  ALL_PRESENT=false
                else
                  echo "✅ $secret: PRESENT"
                fi
                ;;
              "CLOUDFLARE_ACCOUNT_ID")
                if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
                  echo "❌ $secret: MISSING"
                  MISSING_SECRETS+=("$secret")
                  ALL_PRESENT=false
                else
                  echo "✅ $secret: PRESENT"
                fi
                ;;
              "CLOUDFLARE_API_TOKEN")
                if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
                  echo "❌ $secret: MISSING"
                  MISSING_SECRETS+=("$secret")
                  ALL_PRESENT=false
                else
                  echo "✅ $secret: PRESENT"
                fi
                ;;
            esac
          done
          
          echo ""
          echo "📊 Audit Summary"
          echo "================"
          
          if [ "$ALL_PRESENT" = true ]; then
            echo "🎉 STATUS: ALL_SECRETS_PRESENT"
            echo "✅ All required secrets configured"
            echo "🚀 ATLAS_PERFECT_MODE deployment UNBLOCKED"
            echo "status=SECRETS_COMPLETE" >> $GITHUB_OUTPUT
            echo "missing=" >> $GITHUB_OUTPUT
          else
            echo "⚠️  STATUS: MISSING_SECRETS"
            echo "❌ Missing ${#MISSING_SECRETS[@]} required secret(s)"
            echo "🔧 Required action: Configure missing secrets"
            echo "📍 Location: GitHub → Settings → Security → Actions → Secrets and variables → Organization secrets"
            echo ""
            echo "Missing secrets:"
            printf '%s\n' "${MISSING_SECRETS[@]}"
            
            # Join missing secrets with commas
            MISSING_LIST=$(IFS=','; echo "${MISSING_SECRETS[*]}")
            echo "status=SECRETS_MISSING" >> $GITHUB_OUTPUT
            echo "missing=$MISSING_LIST" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Secrets Issue (if missing)
        if: steps.audit.outputs.status == 'SECRETS_MISSING'
        uses: actions/github-script@v7
        with:
          script: |
            const missing = '${{ steps.audit.outputs.missing }}';
            const missingArray = missing.split(',');
            
            const issueBody = `## 🔐 SECRETS: Missing Required Organization Secrets
            
            **Status**: ATLAS_PERFECT_MODE_CLOSEOUT blocked by missing secrets
            **Required Action**: Configure the following secrets in GitHub organization settings
            
            ### Missing Secrets
            ${missingArray.map(secret => `- \`${secret}\``).join('\n')}
            
            ### Configuration Location
            GitHub → Settings → Security → Actions → Secrets and variables → **Organization secrets**
            
            ### Required Secrets Details
            - \`VERCEL_TOKEN\`: Vercel API token with deployment permissions
            - \`VERCEL_ORG_ID\`: Vercel organization ID (get from \`vercel teams ls\`)
            - \`VERCEL_PROJECT_ID_ADMIN_INSIGHTS\`: Project ID for admin-insights app
            - \`VERCEL_PROJECT_ID_DEV_PORTAL\`: Project ID for dev-portal app  
            - \`VERCEL_PROJECT_ID_PROOF_MESSENGER\`: Project ID for proof-messenger app
            - \`CLOUDFLARE_ACCOUNT_ID\`: Cloudflare account ID for DNS/CDN
            - \`CLOUDFLARE_API_TOKEN\`: Cloudflare API token with Zone:Edit permissions
            
            ### How to Get Vercel Project IDs
            \`\`\`bash
            # List all projects
            vercel projects ls
            
            # Get specific project ID
            vercel projects ls --format json | jq '.[] | select(.name=="admin-insights") | .id'
            \`\`\`
            
            ### How to Create Vercel Tokens
            \`\`\`bash
            # List existing tokens
            vercel tokens ls
            
            # Create new token (use Vercel dashboard for organization tokens)
            # Go to: https://vercel.com/account/tokens
            \`\`\`
            
            **Next Steps**: Configure missing secrets, then re-run \`atlas-secrets-audit.yml\` workflow
            
            **Auto-created by**: ATLAS_PERFECT_MODE_CLOSEOUT secrets audit
            `;
            
            // Check if issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'secrets,atlas-perfect-mode'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'SECRETS: Missing Required Organization Secrets for ATLAS_PERFECT_MODE',
                body: issueBody,
                labels: ['secrets', 'atlas-perfect-mode', 'priority-high']
              });
              console.log('Created new secrets issue');
            } else {
              console.log('Secrets issue already exists');
            }
            
      - name: Update SECRETS_GUIDE.md
        run: |
          cat > SECRETS_GUIDE.md << 'EOF'
          # ATLAS GitHub Organization Secrets Guide
          
          **Required for**: ATLAS_PERFECT_MODE_CLOSEOUT PERFECT_LIVE status
          **Last Updated**: $(date -u +"%Y-%m-%d %H:%M UTC")
          
          ## 🎯 Required Secrets
          
          The following secrets must be configured in **GitHub Organization Settings**:
          
          ### Vercel Deployment Secrets
          | Secret Name | Description | How to Obtain |
          |-------------|-------------|---------------|
          | `VERCEL_TOKEN` | Vercel API token with deployment permissions | [Vercel Dashboard](https://vercel.com/account/tokens) → Create Token |
          | `VERCEL_ORG_ID` | Vercel organization/team ID | `vercel teams ls` |
          | `VERCEL_PROJECT_ID_ADMIN_INSIGHTS` | Project ID for admin-insights app | `vercel projects ls \| grep admin-insights` |
          | `VERCEL_PROJECT_ID_DEV_PORTAL` | Project ID for dev-portal app | `vercel projects ls \| grep dev-portal` |
          | `VERCEL_PROJECT_ID_PROOF_MESSENGER` | Project ID for proof-messenger app | `vercel projects ls \| grep proof-messenger` |
          
          ### Cloudflare CDN/DNS Secrets
          | Secret Name | Description | How to Obtain |
          |-------------|-------------|---------------|
          | `CLOUDFLARE_ACCOUNT_ID` | Cloudflare account ID | Cloudflare Dashboard → Account ID |
          | `CLOUDFLARE_API_TOKEN` | API token with Zone:Edit permissions | Cloudflare → My Profile → API Tokens |
          
          ## 📋 Setup Instructions
          
          ### 1. Configure GitHub Organization Secrets
          
          1. Go to: **GitHub** → **Settings** → **Security** → **Actions** → **Secrets and variables** → **Organization secrets**
          2. Click **"New organization secret"**
          3. Add each required secret with exact name and value
          4. Set repository access to **"Selected repositories"** → **pussycat186/Atlas**
          
          ### 2. Obtain Vercel Values
          
          #### Install Vercel CLI
          ```bash
          npm install -g vercel
          vercel login
          ```
          
          #### Get Organization ID
          ```bash
          vercel teams ls
          # Copy the ID for your organization
          ```
          
          #### Get Project IDs
          ```bash
          # List all projects
          vercel projects ls
          
          # Get specific project IDs
          vercel projects ls --format json | jq '.[] | select(.name=="admin-insights") | .id'
          vercel projects ls --format json | jq '.[] | select(.name=="dev-portal") | .id'  
          vercel projects ls --format json | jq '.[] | select(.name=="proof-messenger") | .id'
          ```
          
          #### Create API Token
          1. Go to: https://vercel.com/account/tokens
          2. Click **"Create Token"**
          3. Name: "ATLAS GitHub Actions"
          4. Scope: **Full Account** (for organization deployments)
          5. Expiration: **No expiration** (for CI/CD)
          6. Copy the generated token
          
          ### 3. Obtain Cloudflare Values
          
          #### Account ID
          1. Go to: https://dash.cloudflare.com/
          2. Copy **Account ID** from right sidebar
          
          #### API Token
          1. Go to: https://dash.cloudflare.com/profile/api-tokens
          2. Click **"Create Token"**
          3. Use **"Custom token"** template
          4. Permissions:
             - **Zone** : **Zone** : **Edit**
             - **Zone** : **DNS** : **Edit**
          5. Zone Resources: **Include** : **All zones**
          6. Copy the generated token
          
          ## ✅ Verification
          
          After configuring all secrets, run the audit workflow:
          
          ```bash
          gh workflow run atlas-secrets-audit.yml
          ```
          
          Expected output: **STATUS: ALL_SECRETS_PRESENT** ✅
          
          ## 🚨 Security Best Practices
          
          - **Organization secrets** are shared across repositories
          - Use **Selected repositories** access, not **All repositories**
          - Rotate tokens every 90 days
          - Monitor secret usage in Actions logs
          - Never commit secrets to code
          
          ## 🔄 Next Steps
          
          Once all secrets are configured:
          1. Run `atlas-secrets-audit.yml` → **ALL_SECRETS_PRESENT**
          2. Enable security flags in `security/flags.yaml`
          3. Deploy with security headers
          4. Execute `atlas-quality-gates.yml`
          5. Achieve **PERFECT_LIVE** status 🎉
          
          ---
          
          **Auto-generated by**: ATLAS_PERFECT_MODE_CLOSEOUT
          EOF
          
          git add SECRETS_GUIDE.md
          git commit -m "docs: comprehensive secrets guide for ATLAS_PERFECT_MODE_CLOSEOUT" || true
          
      - name: Final Audit Status
        run: |
          echo "🎯 ATLAS Secrets Audit Complete"
          echo "Status: ${{ steps.audit.outputs.status }}"
          if [ "${{ steps.audit.outputs.status }}" = "SECRETS_COMPLETE" ]; then
            echo "🚀 Ready for ATLAS_PERFECT_MODE_CLOSEOUT phase 2"
          else
            echo "⏳ Awaiting secrets configuration"
            echo "Missing: ${{ steps.audit.outputs.missing }}"
          fi