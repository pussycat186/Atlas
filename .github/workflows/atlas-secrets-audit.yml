name: Atlas Secrets Audit

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday
  push:
    branches: [main]
    paths: ['.env*', '**/.env*', 'secrets/**']

# Security: Read-only permissions for secrets audit
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  secrets-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Create evidence directory
        run: |
          timestamp=$(date -u +"%Y%m%d-%H%M")
          echo "EVIDENCE_DIR=docs/evidence/$timestamp" >> $GITHUB_ENV
          mkdir -p "docs/evidence/$timestamp"
      
      - name: Audit required secrets
        run: |
          echo "🔍 Atlas Secrets Audit Report" > "$EVIDENCE_DIR/secrets.txt"
          echo "Generated: $(date -u)" >> "$EVIDENCE_DIR/secrets.txt"
          echo "" >> "$EVIDENCE_DIR/secrets.txt"
          
          # Define required secrets
          secrets=(
            "VERCEL_TOKEN"
            "VERCEL_ORG_ID"
            "VERCEL_PROJECT_ID_ADMIN_INSIGHTS"
            "VERCEL_PROJECT_ID_DEV_PORTAL"
            "VERCEL_PROJECT_ID_PROOF_MESSENGER"
            "CLOUDFLARE_ACCOUNT_ID"
            "CLOUDFLARE_API_TOKEN"
          )
          
          missing_secrets=()
          
          for secret in "${secrets[@]}"; do
            # Check if secret is set (we can't see the value, but we can check if it exists)
            if [ -n "${!secret:-}" ] || [ "$secret" = "VERCEL_TOKEN" -a -n "${VERCEL_TOKEN:-}" ] || \
               [ "$secret" = "VERCEL_ORG_ID" -a -n "${VERCEL_ORG_ID:-}" ] || \
               [ "$secret" = "VERCEL_PROJECT_ID_ADMIN_INSIGHTS" -a -n "${VERCEL_PROJECT_ID_ADMIN_INSIGHTS:-}" ] || \
               [ "$secret" = "VERCEL_PROJECT_ID_DEV_PORTAL" -a -n "${VERCEL_PROJECT_ID_DEV_PORTAL:-}" ] || \
               [ "$secret" = "VERCEL_PROJECT_ID_PROOF_MESSENGER" -a -n "${VERCEL_PROJECT_ID_PROOF_MESSENGER:-}" ] || \
               [ "$secret" = "CLOUDFLARE_ACCOUNT_ID" -a -n "${CLOUDFLARE_ACCOUNT_ID:-}" ] || \
               [ "$secret" = "CLOUDFLARE_API_TOKEN" -a -n "${CLOUDFLARE_API_TOKEN:-}" ]; then
              echo "✅ $secret: OK" >> "$EVIDENCE_DIR/secrets.txt"
            else
              echo "❌ $secret: MISSING" >> "$EVIDENCE_DIR/secrets.txt"
              missing_secrets+=("$secret")
            fi
          done
          
          # Generate summary
          echo "" >> "$EVIDENCE_DIR/secrets.txt"
          echo "Summary: ${#missing_secrets[@]} secrets missing" >> "$EVIDENCE_DIR/secrets.txt"
          
          if [ ${#missing_secrets[@]} -eq 0 ]; then
            echo "STATUS=ALL_SECRETS_PRESENT" >> $GITHUB_ENV
          else
            echo "STATUS=MISSING_SECRETS" >> $GITHUB_ENV
            echo "MISSING_COUNT=${#missing_secrets[@]}" >> $GITHUB_ENV
          fi
          
          cat "$EVIDENCE_DIR/secrets.txt"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID_ADMIN_INSIGHTS: ${{ secrets.VERCEL_PROJECT_ID_ADMIN_INSIGHTS }}
          VERCEL_PROJECT_ID_DEV_PORTAL: ${{ secrets.VERCEL_PROJECT_ID_DEV_PORTAL }}
          VERCEL_PROJECT_ID_PROOF_MESSENGER: ${{ secrets.VERCEL_PROJECT_ID_PROOF_MESSENGER }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Generate secrets setup guide
        run: |
          cat > "$EVIDENCE_DIR/SECRETS_GUIDE.md" << 'EOF'
          # Atlas Secrets Setup Guide
          
          ## Required GitHub Actions Secrets
          
          Navigate to: https://github.com/pussycat186/Atlas/settings/secrets/actions
          
          ### Vercel Configuration
          ```bash
          # Get these from your Vercel dashboard or CLI
          
          # 1. Personal Access Token (Account Settings → Tokens)
          VERCEL_TOKEN=your_vercel_token_here
          
          # 2. Team/Organization ID (Team Settings → General)
          VERCEL_ORG_ID=your_org_id_here
          
          # 3. Project IDs (use `vercel projects list` or dashboard)
          VERCEL_PROJECT_ID_ADMIN_INSIGHTS=prj_admin_insights_id
          VERCEL_PROJECT_ID_DEV_PORTAL=prj_dev_portal_id
          VERCEL_PROJECT_ID_PROOF_MESSENGER=prj_proof_messenger_id
          ```
          
          ### Cloudflare Configuration (Optional)
          ```bash
          # From Cloudflare Dashboard → My Profile → API Tokens
          CLOUDFLARE_ACCOUNT_ID=your_account_id
          CLOUDFLARE_API_TOKEN=your_api_token
          ```
          
          ## Setting Secrets via GitHub CLI
          
          If you have `gh` CLI installed and authenticated:
          
          ```bash
          # Vercel secrets
          gh secret set VERCEL_TOKEN -R pussycat186/Atlas
          gh secret set VERCEL_ORG_ID -R pussycat186/Atlas
          gh secret set VERCEL_PROJECT_ID_ADMIN_INSIGHTS -R pussycat186/Atlas
          gh secret set VERCEL_PROJECT_ID_DEV_PORTAL -R pussycat186/Atlas
          gh secret set VERCEL_PROJECT_ID_PROOF_MESSENGER -R pussycat186/Atlas
          
          # Cloudflare secrets (optional)
          gh secret set CLOUDFLARE_ACCOUNT_ID -R pussycat186/Atlas
          gh secret set CLOUDFLARE_API_TOKEN -R pussycat186/Atlas
          ```
          
          ## Vercel Project Setup
          
          1. Create or link projects on Vercel:
             - `atlas-admin-insights`
             - `atlas-dev-portal`
             - `atlas-proof-messenger`
          
          2. Get project IDs:
             ```bash
             npx vercel projects list
             ```
          
          3. Set the project IDs as secrets using the guide above
          
          ## Verification
          
          After setting secrets, run the "Atlas Secrets Audit" workflow to verify all secrets are properly configured.
          EOF
          
          echo "Secrets setup guide generated at: $EVIDENCE_DIR/SECRETS_GUIDE.md"
      
      - name: Generate audit summary
        run: |
          cat > "$EVIDENCE_DIR/secrets-audit-summary.json" << EOF
          {
            "timestamp": "$(date -u -Iseconds)",
            "status": "${STATUS:-UNKNOWN}",
            "missing_secrets_count": ${MISSING_COUNT:-0},
            "secrets_checked": [
              "VERCEL_TOKEN",
              "VERCEL_ORG_ID", 
              "VERCEL_PROJECT_ID_ADMIN_INSIGHTS",
              "VERCEL_PROJECT_ID_DEV_PORTAL",
              "VERCEL_PROJECT_ID_PROOF_MESSENGER",
              "CLOUDFLARE_ACCOUNT_ID",
              "CLOUDFLARE_API_TOKEN"
            ],
            "artifacts": [
              "secrets.txt",
              "SECRETS_GUIDE.md",
              "secrets-audit-summary.json"
            ]
          }
          EOF
          
          echo "Secrets Audit Summary:"
          cat "$EVIDENCE_DIR/secrets-audit-summary.json" | jq .
      
      - name: Upload secrets audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: atlas-secrets-audit-${{ github.run_number }}
          path: docs/evidence/
          retention-days: 90