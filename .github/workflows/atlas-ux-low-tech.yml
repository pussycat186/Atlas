name: ATLAS UX Low-Tech Validation

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  push:
    branches: [main]
    paths:
      - 'apps/proof-messenger/**'
      - 'design/tokens/**'

permissions:
  contents: write

jobs:
  validate_low_tech:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
      
      - name: Install Dependencies
        run: |
          pnpm install --frozen-lockfile
      
      - name: Install Playwright
        run: |
          pnpm exec playwright install chromium
      
      - name: Validate Vietnamese Content
        id: content
        run: |
          PROD_URL="https://atlas-proof-messenger.vercel.app"
          
          # Check for Vietnamese-first content markers
          MARKERS=(
            "Nhắn tin. An toàn. Tự kiểm chứng."
            "Dùng Passkey"
            "Xác minh"
          )
          
          FAILED=0
          for MARKER in "${MARKERS[@]}"; do
            echo "Checking for: $MARKER"
            RESPONSE=$(curl -s "$PROD_URL" || echo "")
            
            if echo "$RESPONSE" | grep -q "$MARKER"; then
              echo "✅ Found: $MARKER"
            else
              echo "❌ Missing: $MARKER"
              FAILED=1
            fi
          done
          
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
      
      - name: Low-Tech Mode Playwright Tests
        id: playwright
        run: |
          mkdir -p docs/screenshots
          
          cat > tests/low-tech.spec.ts <<'EOF'
          import { test, expect } from '@playwright/test';
          
          test.describe('Low-Tech Mode', () => {
            test('Landing page has large text and clear CTAs', async ({ page }) => {
              await page.goto('https://atlas-proof-messenger.vercel.app');
              
              // Check for Vietnamese hero text
              const heroText = await page.locator('text=Nhắn tin. An toàn. Tự kiểm chứng.').first();
              await expect(heroText).toBeVisible();
              
              // Verify font size is at least 18px (120% of 15px base)
              const fontSize = await heroText.evaluate((el) => {
                return window.getComputedStyle(el).fontSize;
              });
              const fontSizePx = parseInt(fontSize);
              expect(fontSizePx).toBeGreaterThanOrEqual(18);
              
              // Screenshot
              await page.screenshot({ path: 'docs/screenshots/low-tech-landing.png', fullPage: true });
            });
            
            test('Passkey CTA is prominent', async ({ page }) => {
              await page.goto('https://atlas-proof-messenger.vercel.app/onboarding');
              
              const passkeyButton = await page.locator('text=Dùng Passkey').first();
              await expect(passkeyButton).toBeVisible();
              
              // Verify button is large (min 44x44px for touch)
              const box = await passkeyButton.boundingBox();
              expect(box!.width).toBeGreaterThanOrEqual(44);
              expect(box!.height).toBeGreaterThanOrEqual(44);
              
              // Screenshot
              await page.screenshot({ path: 'docs/screenshots/low-tech-onboarding.png', fullPage: true });
            });
            
            test('Verification flow is single action', async ({ page }) => {
              await page.goto('https://atlas-proof-messenger.vercel.app/verify');
              
              const verifyAction = await page.locator('text=Xác minh').first();
              await expect(verifyAction).toBeVisible();
              
              // Screenshot
              await page.screenshot({ path: 'docs/screenshots/low-tech-verify.png', fullPage: true });
            });
            
            test('High contrast and clear focus indicators', async ({ page }) => {
              await page.goto('https://atlas-proof-messenger.vercel.app');
              
              // Tab to first interactive element
              await page.keyboard.press('Tab');
              
              // Check for visible focus outline
              const focused = await page.evaluate(() => {
                const el = document.activeElement;
                const styles = window.getComputedStyle(el!);
                return {
                  outline: styles.outline,
                  outlineWidth: styles.outlineWidth,
                  boxShadow: styles.boxShadow
                };
              });
              
              // Verify focus is visible (outline or box-shadow present)
              const hasFocusIndicator = 
                focused.outlineWidth !== '0px' && focused.outlineWidth !== 'none' ||
                focused.boxShadow !== 'none';
              
              expect(hasFocusIndicator).toBeTruthy();
              
              // Screenshot with focus
              await page.screenshot({ path: 'docs/screenshots/low-tech-focus.png' });
            });
          });
          EOF
          
          # Run tests
          pnpm exec playwright test tests/low-tech.spec.ts || echo "playwright_failed=1" >> $GITHUB_OUTPUT
      
      - name: Sync Figma Tokens
        if: env.FIGMA_TOKEN != '' && env.FIGMA_FILE_KEY != ''
        id: figma
        env:
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE_KEY: ${{ secrets.FIGMA_FILE_KEY }}
        run: |
          if [[ -z "$FIGMA_TOKEN" ]] || [[ -z "$FIGMA_FILE_KEY" ]]; then
            echo "⚠️ Figma credentials not configured, skipping token sync"
            echo "skipped=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Fetching Figma design tokens..."
          
          # Fetch design tokens from Figma API
          RESPONSE=$(curl -s -H "X-Figma-Token: $FIGMA_TOKEN" \
            "https://api.figma.com/v1/files/$FIGMA_FILE_KEY/variables/local" || echo '{"error":"failed"}')
          
          if echo "$RESPONSE" | jq -e '.error' >/dev/null 2>&1; then
            echo "❌ Failed to fetch Figma tokens"
            echo "failed=1" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Transform to design tokens format
          mkdir -p design/tokens
          echo "$RESPONSE" | jq '{
            "colors": .meta.variableCollections | to_entries | map({
              key: .value.name,
              value: .value.modes[0].modeId
            }) | from_entries
          }' > design/tokens/figma.json
          
          # Rebuild design tokens package
          cd packages/design-tokens
          pnpm build || echo "build_failed=1" >> $GITHUB_OUTPUT
          
          echo "✅ Figma tokens synced"
          echo "FIGMA_TOKENS_APPLIED=true" >> $GITHUB_ENV
          echo "applied=true" >> $GITHUB_OUTPUT
      
      - name: Create Evidence
        if: always()
        run: |
          TS=$(date -u +%Y%m%d-%H%M%S)
          EVIDENCE_DIR="docs/evidence/$TS"
          mkdir -p "$EVIDENCE_DIR"
          
          cat > "$EVIDENCE_DIR/UX_LOW_TECH.json" <<EOF
          {
            "timestamp": "$TS",
            "validations": {
              "vietnamese_content": {
                "status": "${{ steps.content.outputs.failed == '1' && 'FAILED' || 'PASSED' }}",
                "markers_checked": [
                  "Nhắn tin. An toàn. Tự kiểm chứng.",
                  "Dùng Passkey",
                  "Xác minh"
                ]
              },
              "playwright_tests": {
                "status": "${{ steps.playwright.outputs.playwright_failed == '1' && 'FAILED' || 'PASSED' }}",
                "checks": [
                  "Large text (≥18px)",
                  "Prominent CTAs (≥44x44px)",
                  "Single verification action",
                  "Visible focus indicators"
                ]
              },
              "figma_sync": {
                "status": "${{ steps.figma.outputs.applied == 'true' && 'APPLIED' || steps.figma.outputs.skipped == 'true' && 'SKIPPED' || 'NOT_CONFIGURED' }}",
                "tokens_file": "design/tokens/figma.json"
              }
            },
            "screenshots": [
              "docs/screenshots/low-tech-landing.png",
              "docs/screenshots/low-tech-onboarding.png",
              "docs/screenshots/low-tech-verify.png",
              "docs/screenshots/low-tech-focus.png"
            ],
            "low_tech_features": {
              "base_font_size": "120% (+20% from default)",
              "language": "Vietnamese-first",
              "cta_size": "Large (≥44x44px for touch)",
              "single_action": "One 'Xác minh' button per flow",
              "high_contrast": "WCAG AA compliant",
              "focus_indicators": "Visible and clear"
            }
          }
          EOF
          
          echo "Evidence created at $EVIDENCE_DIR/UX_LOW_TECH.json"
      
      - name: Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: low-tech-screenshots
          path: docs/screenshots/
          retention-days: 30
      
      - name: Commit Evidence
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add docs/evidence/ docs/screenshots/ design/tokens/
          git diff --staged --quiet || git commit -m "chore(ux): Add low-tech mode evidence and screenshots $(date -u +%Y%m%d-%H%M%S)"
          git push origin main || echo "No changes to push"
