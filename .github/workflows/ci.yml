name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run unit tests
        run: pnpm -r test -- --ci --reporters=default

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Restore dist artifacts from previous step (optional)
        run: |
          echo "(dist present in repo checkout)"

      - name: Docker info
        run: |
          docker --version
          docker compose version || docker-compose --version || true

      - name: Build services
        run: docker compose -f infra/docker/compose.ci.yml build --no-cache

      - name: Up services
        run: docker compose -f infra/docker/compose.ci.yml up -d

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Smoke
        run: chmod +x scripts/smoke.sh && ./scripts/smoke.sh http://localhost:8080

      - name: Logs on failure
        if: failure()
        run: |
          docker ps -a
          docker compose -f infra/docker/compose.ci.yml logs --tail=200

      - name: Stop services
        if: always()
        run: docker compose -f infra/docker/compose.ci.yml down -v

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Enable corepack
        run: corepack enable
      - name: Install deps (pnpm)
        run: pnpm install
      - name: Build TS
        run: pnpm run build

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Enable corepack
        run: corepack enable
      - name: Install deps (pnpm)
        run: pnpm install
      - name: Build TS
        run: pnpm run build
      - uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull base image with retry
        run: |
          for i in 1 2 3; do
            docker pull node:20-alpine && break || sleep 15
          done
      - name: Build Gateway image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/gateway/Dockerfile
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Build Witness image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/witness-node/Dockerfile
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  observability-smoke:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Enable corepack
        run: corepack enable
      - name: Install deps (pnpm)
        run: pnpm install
      - name: Build TS
        run: pnpm run build
      - name: Compose up
        run: docker compose -f infra/docker/compose.ci.yml up -d
      - name: Wait for Gateway metrics
        run: |
          for i in {1..30}; do
            curl -fsS http://localhost:8080/metrics && exit 0; sleep 2; done; exit 1
      - name: Wait for Witness metrics
        run: |
          for i in {1..30}; do
            curl -fsS http://localhost:8091/metrics && exit 0; sleep 2; done; exit 1

  sec-verify:
    name: Security Verify
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: sigstore/cosign-installer@v3
      - uses: imjasonh/setup-crane@v0.4
      - name: Resolve digests for :latest
        id: dig
        run: |
          echo "gw=$(crane digest ghcr.io/${{ github.repository_owner }}/atlas-gateway:latest)" >> $GITHUB_OUTPUT
          echo "wt=$(crane digest ghcr.io/${{ github.repository_owner }}/atlas-witness:latest)" >> $GITHUB_OUTPUT
      - name: cosign verify latest
        env: { COSIGN_EXPERIMENTAL: 1 }
        run: |
          cosign verify \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
            --certificate-identity-regexp="https://github.com/${{ github.repository_owner }}/$(basename $GITHUB_REPOSITORY)/\\.github/workflows/release\\.yml@refs/tags/.*" \
            ghcr.io/${{ github.repository_owner }}/atlas-gateway@${{ steps.dig.outputs.gw }}
          cosign verify \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
            --certificate-identity-regexp="https://github.com/${{ github.repository_owner }}/$(basename $GITHUB_REPOSITORY)/\\.github/workflows/release\\.yml@refs/tags/.*" \
            ghcr.io/${{ github.repository_owner }}/atlas-witness@${{ steps.dig.outputs.wt }}
