name: CI Performance Testing

on:
  push:
    branches: [main, reboot/atlas-hardening-v1]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  performance-test:
    runs-on: ubuntu-latest-xl
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build services
      run: pnpm build
    
    - name: Start services
      run: |
        docker-compose up -d
        sleep 30
        
        # Wait for services to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
        echo "All services are ready"
    
    - name: Install k6
      run: |
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Create k6 performance test
      run: |
        cat > k6-performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        import { Rate } from 'k6/metrics';
        
        // Custom metrics
        const errorRate = new Rate('error_rate');
        
        export const options = {
          scenarios: {
            constant_arrival_rate: {
              executor: 'constant-arrival-rate',
              rate: 500, // 500 RPS
              timeUnit: '1s',
              duration: '90s', // 15s warm-up + 60s test + 15s cool-down
              preAllocatedVUs: 100,
              maxVUs: 1000,
            },
          },
          thresholds: {
            http_req_duration: ['p(95)<200'], // p95 < 200ms
            http_req_failed: ['rate<0.01'], // error rate < 1%
            error_rate: ['rate<0.01'], // custom error rate < 1%
            http_reqs: ['rate>=500'], // RPS >= 500
          },
        };
        
        const BASE_URL = 'http://localhost:3000';
        
        export function setup() {
          console.log('Starting performance test setup...');
          return {};
        }
        
        export default function(data) {
          const testCases = [
            {
              name: 'submit_record',
              method: 'POST',
              url: `${BASE_URL}/record`,
              payload: {
                app: 'chat',
                record_id: `test-${Date.now()}-${Math.random()}`,
                payload: 'Test message for performance testing',
                meta: {
                  room_id: 'perf-test-room',
                  message_type: 'text',
                  user_id: 'perf-test-user'
                }
              },
              headers: {
                'Content-Type': 'application/json',
                'Idempotency-Key': `perf-${Date.now()}-${Math.random()}`
              }
            },
            {
              name: 'health_check',
              method: 'GET',
              url: `${BASE_URL}/health`,
              payload: null,
              headers: {}
            },
            {
              name: 'metrics_check',
              method: 'GET',
              url: `${BASE_URL}/metrics`,
              payload: null,
              headers: {}
            }
          ];
          
          // 90% dynamic requests, 10% static
          const isDynamic = Math.random() < 0.9;
          const testCase = isDynamic ? testCases[0] : testCases[Math.floor(Math.random() * 2) + 1];
          
          let response;
          if (testCase.method === 'POST') {
            response = http.post(testCase.url, JSON.stringify(testCase.payload), {
              headers: testCase.headers
            });
          } else {
            response = http.get(testCase.url, {
              headers: testCase.headers
            });
          }
          
          const success = check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 200ms': (r) => r.timings.duration < 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          
          errorRate.add(!success);
          
          // Small sleep to prevent overwhelming the system
          sleep(0.1);
        }
        
        export function teardown(data) {
          console.log('Performance test completed');
        }
        EOF
    
    - name: Run performance test
      run: |
        echo "Starting performance test..."
        k6 run --summary-export=k6-results.json k6-performance-test.js
        
        echo "Performance test completed"
        echo "Results saved to k6-results.json"
    
    - name: Parse k6 results
      run: |
        # Extract key metrics from k6 results
        cat > parse-k6-results.js << 'EOF'
        const fs = require('fs');
        
        try {
          const results = JSON.parse(fs.readFileSync('k6-results.json', 'utf8'));
          
          const metrics = results.metrics;
          const rps = metrics.http_reqs?.rate || 0;
          const p95 = metrics.http_req_duration?.p95 || 0;
          const errorRate = metrics.http_req_failed?.rate || 0;
          const avgResponseTime = metrics.http_req_duration?.avg || 0;
          
          console.log('=== PERFORMANCE TEST RESULTS ===');
          console.log(`RPS: ${rps.toFixed(2)}`);
          console.log(`P95 Latency: ${p95.toFixed(2)}ms`);
          console.log(`Error Rate: ${(errorRate * 100).toFixed(2)}%`);
          console.log(`Avg Response Time: ${avgResponseTime.toFixed(2)}ms`);
          console.log(`Total Requests: ${metrics.http_reqs?.count || 0}`);
          console.log(`Failed Requests: ${metrics.http_req_failed?.count || 0}`);
          
          // Check thresholds
          const rpsPass = rps >= 500;
          const p95Pass = p95 <= 200;
          const errorPass = errorRate < 0.01;
          
          console.log('\n=== THRESHOLD CHECKS ===');
          console.log(`RPS >= 500: ${rpsPass ? '✅ PASS' : '❌ FAIL'} (${rps.toFixed(2)})`);
          console.log(`P95 <= 200ms: ${p95Pass ? '✅ PASS' : '❌ FAIL'} (${p95.toFixed(2)}ms)`);
          console.log(`Error Rate < 1%: ${errorPass ? '✅ PASS' : '❌ FAIL'} (${(errorRate * 100).toFixed(2)}%)`);
          
          const allPass = rpsPass && p95Pass && errorPass;
          console.log(`\nOverall Result: ${allPass ? '✅ ALL TESTS PASSED' : '❌ SOME TESTS FAILED'}`);
          
          // Write summary for GitHub Actions
          fs.writeFileSync('performance-summary.txt', `
          RPS: ${rps.toFixed(2)}
          P95 Latency: ${p95.toFixed(2)}ms
          Error Rate: ${(errorRate * 100).toFixed(2)}%
          Avg Response Time: ${avgResponseTime.toFixed(2)}ms
          Total Requests: ${metrics.http_reqs?.count || 0}
          Failed Requests: ${metrics.http_req_failed?.count || 0}
          
          Thresholds:
          - RPS >= 500: ${rpsPass ? 'PASS' : 'FAIL'}
          - P95 <= 200ms: ${p95Pass ? 'PASS' : 'FAIL'}
          - Error Rate < 1%: ${errorPass ? 'PASS' : 'FAIL'}
          
          Overall: ${allPass ? 'PASS' : 'FAIL'}
          `);
          
          // Exit with error code if tests failed
          if (!allPass) {
            process.exit(1);
          }
        } catch (error) {
          console.error('Error parsing k6 results:', error);
          process.exit(1);
        }
        EOF
        
        node parse-k6-results.js
    
    - name: Display performance summary
      run: |
        echo "=== PERFORMANCE TEST SUMMARY ==="
        cat performance-summary.txt
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          k6-results.json
          performance-summary.txt
          k6-performance-test.js
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down || true
        docker system prune -f || true
