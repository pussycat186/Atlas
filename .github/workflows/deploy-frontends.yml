name: Deploy Frontends

on:
  workflow_dispatch:
    inputs:
      message:
        description: 'Deployment message'
        required: false
        default: 'Deploy stub pages'

env:
  NODE_OPTIONS: --max-old-space-size=4096
  NPM_CONFIG_FROZEN_LOCKFILE: false
  NPM_CONFIG_SHAMEFULLY_HOIST: true

jobs:
  deploy-proof-messenger:
    runs-on: ubuntu-latest
    outputs:
      deploy_url: ${{ steps.deploy.outputs.deploy_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Configure pnpm
      run: |
        pnpm config set shamefully-hoist true
        
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
        
    - name: Build apps only
      run: pnpm -r --filter "./apps/*" build
        
    - name: Setup Vercel project config
      run: |
        mkdir -p apps/proof-messenger/.vercel
        cat > apps/proof-messenger/.vercel/project.json << EOF
        {
          "orgId": "${{ secrets.VERCEL_ORG_ID }}",
          "projectId": "${{ secrets.VERCEL_PROJECT_ID_PROOF }}"
        }
        EOF
        
    - name: Deploy to Vercel
      id: deploy
      run: |
        cd apps/proof-messenger
        
        echo "Pulling Vercel configuration..."
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
        echo "Building for production..."
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
        echo "Deploying to production..."
        DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
        echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        
        echo "✅ Deployed proof-messenger to $DEPLOY_URL"
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment at ${{ steps.deploy.outputs.deploy_url }}"
        curl -f -s "${{ steps.deploy.outputs.deploy_url }}" > /dev/null || {
          echo "❌ Deployment failed health check"
          exit 1
        }
        echo "✅ Deployment is healthy"

  deploy-admin-insights:
    runs-on: ubuntu-latest
    outputs:
      deploy_url: ${{ steps.deploy.outputs.deploy_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Configure pnpm
      run: |
        pnpm config set shamefully-hoist true
        
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
        
    - name: Build apps only
      run: pnpm -r --filter "./apps/*" build
        
    - name: Setup Vercel project config
      run: |
        mkdir -p apps/admin-insights/.vercel
        cat > apps/admin-insights/.vercel/project.json << EOF
        {
          "orgId": "${{ secrets.VERCEL_ORG_ID }}",
          "projectId": "${{ secrets.VERCEL_PROJECT_ID_INSIGHTS }}"
        }
        EOF
        
    - name: Deploy to Vercel
      id: deploy
      run: |
        cd apps/admin-insights
        
        echo "Pulling Vercel configuration..."
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
        echo "Building for production..."
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
        echo "Deploying to production..."
        DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
        echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        
        echo "✅ Deployed admin-insights to $DEPLOY_URL"
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment at ${{ steps.deploy.outputs.deploy_url }}"
        curl -f -s "${{ steps.deploy.outputs.deploy_url }}" > /dev/null || {
          echo "❌ Deployment failed health check"
          exit 1
        }
        echo "✅ Deployment is healthy"

  deploy-dev-portal:
    runs-on: ubuntu-latest
    outputs:
      deploy_url: ${{ steps.deploy.outputs.deploy_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Configure pnpm
      run: |
        pnpm config set shamefully-hoist true
        
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
        
    - name: Build apps only
      run: pnpm -r --filter "./apps/*" build
        
    - name: Setup Vercel project config
      run: |
        mkdir -p apps/dev-portal/.vercel
        cat > apps/dev-portal/.vercel/project.json << EOF
        {
          "orgId": "${{ secrets.VERCEL_ORG_ID }}",
          "projectId": "${{ secrets.VERCEL_PROJECT_ID_DEVPORTAL }}"
        }
        EOF
        
    - name: Deploy to Vercel
      id: deploy
      run: |
        cd apps/dev-portal
        
        echo "Pulling Vercel configuration..."
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
        echo "Building for production..."
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
        echo "Deploying to production..."
        DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
        echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        
        echo "✅ Deployed dev-portal to $DEPLOY_URL"
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment at ${{ steps.deploy.outputs.deploy_url }}"
        curl -f -s "${{ steps.deploy.outputs.deploy_url }}" > /dev/null || {
          echo "❌ Deployment failed health check"
          exit 1
        }
        echo "✅ Deployment is healthy"
        
  generate-urls:
    needs: [deploy-proof-messenger, deploy-admin-insights, deploy-dev-portal]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Generate LIVE_URLS.json
      run: |
        cat > LIVE_URLS.json << EOF
        {
          "status": "LIVE",
          "tag": "manual-deploy-$(date +%Y%m%d-%H%M)",
          "frontends": {
            "proof_messenger": "${{ needs.deploy-proof-messenger.outputs.deploy_url }}",
            "admin_insights": "${{ needs.deploy-admin-insights.outputs.deploy_url }}",
            "dev_portal": "${{ needs.deploy-dev-portal.outputs.deploy_url }}"
          },
          "backends": {
            "gateway": "https://atlas-gateway.sonthenguyen186.workers.dev",
            "quantum_sync": "https://atlas-quantum-sync.sonthenguyen186.workers.dev"
          }
        }
        EOF
        
        echo "Generated LIVE_URLS.json:"
        cat LIVE_URLS.json
        
    - name: Upload LIVE_URLS.json
      uses: actions/upload-artifact@v4
      with:
        name: live-urls-final
        path: LIVE_URLS.json