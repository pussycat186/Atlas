name: Deploy Frontends
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      message:
        description: 'Deployment message'
        required: false
        default: 'Deploy frontends'
concurrency:
  group: deploy-frontends-${{ github.ref }}
  cancel-in-progress: true
jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app:
          - { id: PROOF,     path: "apps/proof-messenger" }
          - { id: INSIGHTS,  path: "apps/admin-insights" }
          - { id: DEV,       path: "apps/dev-portal" }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - uses: pnpm/action-setup@v2
        with: { version: 8 }
      - name: Check required secrets
        run: |
          need=(VERCEL_TOKEN VERCEL_ORG_ID VERCEL_PROJECT_ID_PROOF VERCEL_PROJECT_ID_INSIGHTS VERCEL_PROJECT_ID_DEV VERCEL_PROJECT_ID_DEVPORTAL)
          missing=0
          for k in "${need[@]}"; do
            v="${!k}"
            if [ -z "$v" ]; then echo "::notice::Secret $k not set (may be unused)"; fi
          done
          # Hard gates for token/org and proj ids (DEV allows fallback)
          for k in VERCEL_TOKEN VERCEL_ORG_ID VERCEL_PROJECT_ID_PROOF VERCEL_PROJECT_ID_INSIGHTS; do
            v="${!k}"; if [ -z "$v" ]; then echo "BLOCKER_MISSING_SECRET:$k"; exit 1; fi
          done
        env:
          VERCEL_TOKEN:              ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID:             ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID_PROOF:   ${{ secrets.VERCEL_PROJECT_ID_PROOF }}
          VERCEL_PROJECT_ID_INSIGHTS:${{ secrets.VERCEL_PROJECT_ID_INSIGHTS }}
          VERCEL_PROJECT_ID_DEV:     ${{ secrets.VERCEL_PROJECT_ID_DEV }}
          VERCEL_PROJECT_ID_DEVPORTAL: ${{ secrets.VERCEL_PROJECT_ID_DEVPORTAL }}
      - name: Install workspace deps
        run: pnpm i --frozen-lockfile
      - name: Build all apps (monorepo root)
        run: pnpm --filter "./apps/*" build
      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest
      - name: Resolve PROJECT_ID per app (with DEV fallback)
        id: pid
        shell: bash
        run: |
          case "${{ matrix.app.id }}" in
            PROOF)    PROJECT_ID="$VERCEL_PROJECT_ID_PROOF" ;;
            INSIGHTS) PROJECT_ID="$VERCEL_PROJECT_ID_INSIGHTS" ;;
            DEV)      PROJECT_ID="${VERCEL_PROJECT_ID_DEV:-$VERCEL_PROJECT_ID_DEVPORTAL}" ;;
          esac
          if [ -z "$PROJECT_ID" ]; then
            echo "BLOCKER_MISSING_SECRET:VERCEL_PROJECT_ID_${{ matrix.app.id }}"; exit 1
          fi
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_OUTPUT
        env:
          VERCEL_PROJECT_ID_PROOF:     ${{ secrets.VERCEL_PROJECT_ID_PROOF }}
          VERCEL_PROJECT_ID_INSIGHTS:  ${{ secrets.VERCEL_PROJECT_ID_INSIGHTS }}
          VERCEL_PROJECT_ID_DEV:       ${{ secrets.VERCEL_PROJECT_ID_DEV }}
          VERCEL_PROJECT_ID_DEVPORTAL: ${{ secrets.VERCEL_PROJECT_ID_DEVPORTAL }}
      - name: Link project
        run: vercel link --yes --cwd "${{ matrix.app.path }}" --project "${{ steps.pid.outputs.PROJECT_ID }}" --token "$VERCEL_TOKEN"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      - name: Pull env (production)
        run: vercel pull --yes --environment=production --cwd "${{ matrix.app.path }}" --token "$VERCEL_TOKEN"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      - name: Deploy (cloud build)
        run: vercel deploy --prod --yes --cwd "${{ matrix.app.path }}" --project "${{ steps.pid.outputs.PROJECT_ID }}" --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  audit:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: node -v
      - name: Ensure audit script exists (create if missing)
        run: |
          if [ ! -f scripts/replan-nav-audit.js ]; then
            cat > scripts/replan-nav-audit.js <<'JS'
const fs = require('fs'); const https = require('https'); const path = require('path');
const live = JSON.parse(fs.readFileSync('LIVE_URLS.json','utf8')); const base = live.frontends||live;
const paths = ['/', '/prism', '/favicon.svg', '/manifest.json']; const marker='ATLAS • Prism UI — Peak Preview';
function get(u){return new Promise(r=>{https.get(u,res=>{let b='';res.on('data',x=>b+=x);res.on('end',()=>r({u,sc:res.statusCode,ok:res.statusCode>=200&&res.statusCode<400,body:b}))}).on('error',e=>r({u,sc:0,ok:false,err:e.message}))})}
(async()=>{
  const out={ts:new Date().toISOString(),results:{},non200:0,markerMissing:0};
  for(const [k,baseUrl] of Object.entries(base)){ out.results[k]={};
    for(const p of paths){ const r=await get(baseUrl+p); out.results[k][p]={status:r.sc,ok:r.ok};
      if(!r.ok) out.non200++; if(p==='/prism'&&r.ok){const has=r.body.includes(marker); out.results[k][p].hasMarker=has; if(!has) out.markerMissing++;}}
  }
  fs.mkdirSync('docs/REPLAN',{recursive:true});
  fs.writeFileSync('docs/REPLAN/NAV_AUDIT.json',JSON.stringify(out,null,2));
  if(out.non200===0 && out.markerMissing===0){console.log('AUDIT_PASS')} else {console.log('AUDIT_FAIL'); process.exit(1);}
})();
JS
          fi
      - name: Run production audit
        run: node scripts/replan-nav-audit.js
      - name: Print success JSON
        if: success()
        run: |
          SHA=$(git rev-parse HEAD)
          echo '{"status":"PRISM_LIVE","routes":{"proof_messenger":"'$(jq -r '.frontends.proof_messenger' LIVE_URLS.json)'/prism","admin_insights":"'$(jq -r '.frontends.admin_insights' LIVE_URLS.json)'/prism","dev_portal":"'$(jq -r '.frontends.dev_portal' LIVE_URLS.json)'/prism"},"audit":"docs/REPLAN/NAV_AUDIT.json","commit":"'$SHA'"}'