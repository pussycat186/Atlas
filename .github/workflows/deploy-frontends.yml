name: Deploy Frontends

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to deploy'
        required: true
        default: 'v20250918-0020'
      rollback_to_tag:
        description: 'Rollback to specific tag (optional)'
        required: false
        default: ''

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-frontends:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine release tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if [ -n "${{ github.event.inputs.rollback_to_tag }}" ]; then
            echo "tag=${{ github.event.inputs.rollback_to_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          fi
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Download signed release tarball
      run: |
        TAG="${{ steps.tag.outputs.tag }}"
        echo "Downloading release tarball for tag: $TAG"
        
        # Wait for release to be available (retry up to 5 times)
        for i in {1..5}; do
          echo "Attempt $i: Checking for release $TAG"
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG")
          
          TARBALL_URL=$(echo "$RELEASE_INFO" | jq -r '.tarball_url')
          echo "Tarball URL: $TARBALL_URL"
          
          if [ "$TARBALL_URL" != "null" ] && [ "$TARBALL_URL" != "" ]; then
            echo "Release found, downloading tarball..."
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -o "atlas-${TAG}.tar.gz" \
              "$TARBALL_URL"
            break
          else
            echo "Release not ready yet, waiting 30 seconds..."
            sleep 30
          fi
        done
        
        # Verify the tarball was downloaded
        if [ ! -f "atlas-${TAG}.tar.gz" ]; then
          echo "Failed to download tarball after 5 attempts"
          exit 1
        fi
        
    - name: Extract release tarball
      run: |
        TAG="${{ steps.tag.outputs.tag }}"
        echo "Extracting release tarball: atlas-${TAG}.tar.gz"
        tar -xzf "atlas-${TAG}.tar.gz"
        ls -la
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.0.0
        
    - name: Install dependencies
      run: |
        # GitHub tarballs extract repository contents directly to current directory
        EXTRACTED_DIR="."
        echo "Extracted directory: $EXTRACTED_DIR"
        cd "$EXTRACTED_DIR"
        pnpm install --frozen-lockfile
        
    - name: Build proof-messenger
      run: |
        # GitHub tarballs extract repository contents directly to current directory
        EXTRACTED_DIR="."
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "Contents of apps directory:"
        ls -la apps/
        echo "Contents of apps/proof-messenger directory:"
        ls -la apps/proof-messenger/
        cd "$EXTRACTED_DIR/apps/proof-messenger"
        pnpm build
        
    - name: Build admin-insights
      run: |
        # GitHub tarballs extract repository contents directly to current directory
        EXTRACTED_DIR="."
        cd "$EXTRACTED_DIR/apps/admin-insights"
        pnpm build
        
    - name: Build dev-portal
      run: |
        if [ -n "${{ secrets.VERCEL_PROJECT_ID_DEVPORTAL }}" ]; then
          # Find the extracted directory
          EXTRACTED_DIR=$(find . -maxdepth 1 -name "atlas-*" -type d | head -1)
          cd "$EXTRACTED_DIR/apps/dev-portal"
          pnpm build
        else
          echo "Skipping dev-portal build - VERCEL_PROJECT_ID_DEVPORTAL not configured"
        fi
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Deploy proof-messenger to Vercel
      run: |
        # GitHub tarballs extract repository contents directly to current directory
        EXTRACTED_DIR="."
        cd "$EXTRACTED_DIR/apps/proof-messenger"
        vercel --token ${{ secrets.VERCEL_TOKEN }} \
          --scope ${{ secrets.VERCEL_ORG_ID }} \
          --prod \
          --yes \
          --cwd .
      env:
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_PROOF }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Deploy admin-insights to Vercel
      run: |
        # GitHub tarballs extract repository contents directly to current directory
        EXTRACTED_DIR="."
        cd "$EXTRACTED_DIR/apps/admin-insights"
        vercel --token ${{ secrets.VERCEL_TOKEN }} \
          --scope ${{ secrets.VERCEL_ORG_ID }} \
          --prod \
          --yes \
          --cwd .
      env:
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_INSIGHTS }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Deploy dev-portal to Vercel
      run: |
        if [ -n "${{ secrets.VERCEL_PROJECT_ID_DEVPORTAL }}" ]; then
          # GitHub tarballs extract repository contents directly to current directory
          EXTRACTED_DIR="."
          cd "$EXTRACTED_DIR/apps/dev-portal"
        vercel --token ${{ secrets.VERCEL_TOKEN }} \
          --scope ${{ secrets.VERCEL_ORG_ID }} \
          --prod \
          --yes \
          --cwd .
        else
          echo "Skipping dev-portal deployment - VERCEL_PROJECT_ID_DEVPORTAL not configured"
        fi
      env:
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEVPORTAL }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Get Vercel deployment URLs
      id: urls
      run: |
        # Get the latest deployments for each project
        PROOF_URL=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} atlas-proof-messenger --json | jq -r '.[0].url' | sed 's/^/https:\/\//')
        INSIGHTS_URL=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} atlas-admin-insights --json | jq -r '.[0].url' | sed 's/^/https:\/\//')
        
        echo "proof_messenger_url=$PROOF_URL" >> $GITHUB_OUTPUT
        echo "admin_insights_url=$INSIGHTS_URL" >> $GITHUB_OUTPUT
        
        if [ -n "${{ secrets.VERCEL_PROJECT_ID_DEVPORTAL }}" ]; then
          DEV_PORTAL_URL=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} atlas-dev-portal --json | jq -r '.[0].url' | sed 's/^/https:\/\//')
          echo "dev_portal_url=$DEV_PORTAL_URL" >> $GITHUB_OUTPUT
        else
          echo "dev_portal_url=" >> $GITHUB_OUTPUT
        fi
        
    - name: Verify deployments
      run: |
        echo "Verifying frontend deployments..."
        
        # Verify proof-messenger
        PROOF_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.urls.outputs.proof_messenger_url }}")
        if [ "$PROOF_STATUS" = "200" ] || [ "$PROOF_STATUS" = "302" ]; then
          echo "✅ proof-messenger: $PROOF_STATUS"
        else
          echo "❌ proof-messenger: $PROOF_STATUS"
          exit 1
        fi
        
        # Verify admin-insights
        INSIGHTS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.urls.outputs.admin_insights_url }}")
        if [ "$INSIGHTS_STATUS" = "200" ] || [ "$INSIGHTS_STATUS" = "302" ]; then
          echo "✅ admin-insights: $INSIGHTS_STATUS"
        else
          echo "❌ admin-insights: $INSIGHTS_STATUS"
          exit 1
        fi
        
        # Verify dev-portal if deployed
        if [ "${{ steps.urls.outputs.dev_portal_url }}" != "" ]; then
          DEV_PORTAL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.urls.outputs.dev_portal_url }}")
          if [ "$DEV_PORTAL_STATUS" = "200" ] || [ "$DEV_PORTAL_STATUS" = "302" ]; then
            echo "✅ dev-portal: $DEV_PORTAL_STATUS"
          else
            echo "❌ dev-portal: $DEV_PORTAL_STATUS"
            exit 1
          fi
        fi
        
    - name: Generate LIVE_URLS.json
      run: |
        cat > LIVE_URLS.json << EOF
        {
          "status": "LIVE",
          "tag": "${{ steps.tag.outputs.tag }}",
          "frontends": {
            "proof_messenger": "${{ steps.urls.outputs.proof_messenger_url }}",
            "admin_insights": "${{ steps.urls.outputs.admin_insights_url }}",
            "dev_portal": "${{ steps.urls.outputs.dev_portal_url }}"
          },
          "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow_run_id": "${{ github.run_id }}"
        }
        EOF
        
        echo "Generated LIVE_URLS.json:"
        cat LIVE_URLS.json
        
    - name: Upload LIVE_URLS.json
      uses: actions/upload-artifact@v4
      with:
        name: frontend-live-urls
        path: LIVE_URLS.json
