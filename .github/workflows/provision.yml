name: Provision Cloudflare Resources

on:
  workflow_dispatch:
    inputs:
      create_resources:
        description: 'Create KV/D1/R2 resources'
        required: true
        type: boolean
        default: false

jobs:
  provision:
    runs-on: ubuntu-latest
    name: Provision Resources
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install wrangler
        run: pnpm add -g wrangler

      - name: Create KV Namespaces
        if: inputs.create_resources
        id: kv
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Creating KV namespaces..."
          JWKS_KV_ID=$(wrangler kv:namespace create JWKS --json 2>/dev/null | jq -r '.id' || echo "__JWKS_KV_ID__")
          DPOP_NONCE_KV_ID=$(wrangler kv:namespace create DPOP_NONCE --json 2>/dev/null | jq -r '.id' || echo "__DPOP_NONCE_KV_ID__")
          IDEMPOTENCY_KV_ID=$(wrangler kv:namespace create IDEMPOTENCY --json 2>/dev/null | jq -r '.id' || echo "__IDEMPOTENCY_KV_ID__")
          RATE_LIMIT_KV_ID=$(wrangler kv:namespace create RATE_LIMIT --json 2>/dev/null | jq -r '.id' || echo "__RATE_LIMIT_KV_ID__")
          
          echo "jwks_kv_id=$JWKS_KV_ID" >> $GITHUB_OUTPUT
          echo "dpop_nonce_kv_id=$DPOP_NONCE_KV_ID" >> $GITHUB_OUTPUT
          echo "idempotency_kv_id=$IDEMPOTENCY_KV_ID" >> $GITHUB_OUTPUT
          echo "rate_limit_kv_id=$RATE_LIMIT_KV_ID" >> $GITHUB_OUTPUT

      - name: Create D1 Database
        if: inputs.create_resources
        id: d1
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Creating D1 database..."
          D1_ID=$(wrangler d1 create atlas --json 2>/dev/null | jq -r '.database_id' || echo "__D1_DATABASE_ID__")
          echo "d1_id=$D1_ID" >> $GITHUB_OUTPUT

      - name: Create R2 Bucket
        if: inputs.create_resources
        id: r2
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Creating R2 bucket..."
          wrangler r2 bucket create atlas-media || true
          echo "r2_bucket=atlas-media" >> $GITHUB_OUTPUT

      - name: Patch wrangler.toml with Resource IDs
        if: inputs.create_resources
        run: |
          echo "Patching wrangler.toml with actual resource IDs..."
          
          # Copy template to target location
          cp infra/cloudflare/wrangler.template.toml services/atlas-api/wrangler.toml
          
          # Replace KV namespace IDs
          sed -i "s/__JWKS_KV_ID__/${{ steps.kv.outputs.jwks_kv_id }}/g" services/atlas-api/wrangler.toml
          sed -i "s/__DPOP_NONCE_KV_ID__/${{ steps.kv.outputs.dpop_nonce_kv_id }}/g" services/atlas-api/wrangler.toml
          sed -i "s/__IDEMPOTENCY_KV_ID__/${{ steps.kv.outputs.idempotency_kv_id }}/g" services/atlas-api/wrangler.toml
          sed -i "s/__RATE_LIMIT_KV_ID__/${{ steps.kv.outputs.rate_limit_kv_id }}/g" services/atlas-api/wrangler.toml
          
          # Replace D1 database ID
          sed -i "s/__D1_DATABASE_ID__/${{ steps.d1.outputs.d1_id }}/g" services/atlas-api/wrangler.toml
          
          # Replace R2 bucket name
          sed -i "s/__R2_BUCKET_NAME__/${{ steps.r2.outputs.r2_bucket }}/g" services/atlas-api/wrangler.toml
          
          echo "âœ… wrangler.toml patched successfully"
          cat services/atlas-api/wrangler.toml

      - name: Run D1 Migrations
        if: inputs.create_resources
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Running migrations..."
          cd services/atlas-api
          wrangler d1 migrations apply atlas --remote || true

      - name: Generate JWKS
        run: |
          cd infra/cloudflare/seed
          pnpm install
          npx tsx seed_jwks.ts > jwks_output.txt
          cat jwks_output.txt

      - name: Commit Updated wrangler.toml
        if: inputs.create_resources
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add services/atlas-api/wrangler.toml
          git commit -m "chore: update wrangler.toml with provisioned resource IDs" || echo "No changes to commit"
          git push

      - name: Upload provision logs
        uses: actions/upload-artifact@v4
        with:
          name: provision-logs
          path: |
            infra/cloudflare/seed/jwks_output.txt
          retention-days: 30

