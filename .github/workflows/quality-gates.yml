name: Quality Gates

on:
  push:
    branches:
      - main
      - reboot/atlas-security-core
  pull_request:
  workflow_dispatch:

jobs:
  headers-check:
    runs-on: ubuntu-latest
    name: Security Headers Check
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check headers policy
        run: |
          echo "Checking security headers configuration..."
          
          # Check CSP is defined
          if grep -r "Content-Security-Policy" services/atlas-api/src/middleware/security-headers.ts; then
            echo "✓ CSP configured"
          else
            echo "✗ CSP missing"
            exit 1
          fi
          
          # Check HSTS
          if grep -r "Strict-Transport-Security" services/atlas-api/src/middleware/security-headers.ts; then
            echo "✓ HSTS configured"
          else
            echo "✗ HSTS missing"
            exit 1
          fi
          
          # Check COOP
          if grep -r "Cross-Origin-Opener-Policy" services/atlas-api/src/middleware/security-headers.ts; then
            echo "✓ COOP configured"
          else
            echo "✗ COOP missing"
            exit 1
          fi
          
          # Check COEP
          if grep -r "Cross-Origin-Embedder-Policy" services/atlas-api/src/middleware/security-headers.ts; then
            echo "✓ COEP configured"
          else
            echo "✗ COEP missing"
            exit 1
          fi
          
          echo "✓ All security headers present"

  playwright:
    runs-on: ubuntu-latest
    name: Playwright Smoke Tests
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build frontend
        run: |
          cd apps/messenger-web
          pnpm install
          pnpm run build

      - name: Start preview server
        run: |
          cd apps/messenger-web
          npx serve out -l 3000 &
          sleep 5

      - name: Run Playwright tests
        env:
          BASE_URL: http://localhost:3000
        run: npx playwright test tests/e2e/smoke.spec.ts

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: tests/e2e/screenshots/
          retention-days: 30

  k6-load:
    runs-on: ubuntu-latest
    name: k6 Load Test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run k6 load test
        uses: grafana/k6-action@v0.3.1
        env:
          API_URL: https://atlas-api.workers.dev
        with:
          filename: tests/k6/smoke.js
          flags: --out json=k6-results.json

      - name: Upload k6 results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-results
          path: k6-results.json
          retention-days: 90

  lighthouse:
    runs-on: ubuntu-latest
    name: Lighthouse CI
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: |
          cd apps/messenger-web
          pnpm install
          pnpm run build

      - name: Start server
        run: |
          cd apps/messenger-web
          npx serve out -l 3000 &
          sleep 5

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=lighthouserc.json || true

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 90
