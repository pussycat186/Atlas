name: ATLAS Abuse Guard & WAF

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  push:
    branches: [main]
    paths:
      - 'services/risk-guard/**'
      - 'infra/cloudflare/**'

permissions:
  contents: write
  security-events: write

jobs:
  synthetic_abuse_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Test Rate Limits
        id: rate_limits
        run: |
          APPS=(
            "https://atlas-proof-messenger.vercel.app"
          )
          
          echo "Testing rate limits..."
          FAILED=0
          
          for APP in "${APPS[@]}"; do
            # Test burst message sending (should trigger rate limit)
            echo "Testing burst on $APP/api/messages"
            
            for i in {1..15}; do
              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$APP/api/messages" \
                -H "Content-Type: application/json" \
                -d '{"test":"abuse_guard"}' || echo "000")
              
              if [[ "$i" -gt 10 && "$RESPONSE" != "429" ]]; then
                echo "⚠️ Rate limit not enforced after 10 requests (got $RESPONSE)"
                FAILED=1
              fi
            done
          done
          
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
      
      - name: Test Large Media Upload
        id: media_test
        run: |
          echo "Testing large media rejection..."
          
          # Create a file larger than 10MB
          dd if=/dev/zero of=large_file.bin bs=1M count=11
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -F "file=@large_file.bin" \
            https://atlas-proof-messenger.vercel.app/api/upload || echo "000")
          
          if [[ "$RESPONSE" == "413" || "$RESPONSE" == "400" ]]; then
            echo "✅ Large file rejected correctly"
            echo "failed=0" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Large file not rejected (got $RESPONSE)"
            echo "failed=1" >> $GITHUB_OUTPUT
          fi
      
      - name: Test Suspicious Link Detection
        id: link_test
        run: |
          echo "Testing suspicious link detection..."
          
          SUSPICIOUS_PAYLOAD='{"message":"Click here http://bit.ly/scam for free crypto!"}'
          
          RESPONSE=$(curl -s -X POST \
            https://atlas-proof-messenger.vercel.app/api/messages \
            -H "Content-Type: application/json" \
            -d "$SUSPICIOUS_PAYLOAD" || echo '{"flagged":false}')
          
          # Check if message was flagged (expect 400 or flagged response)
          if echo "$RESPONSE" | grep -qi "flagged\|blocked\|400"; then
            echo "✅ Suspicious content detected"
            echo "failed=0" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Suspicious content not flagged"
            echo "failed=1" >> $GITHUB_OUTPUT
          fi
      
      - name: Apply Cloudflare WAF Rules
        if: env.CLOUDFLARE_API_TOKEN != ''
        id: waf
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [[ -z "$CLOUDFLARE_API_TOKEN" ]]; then
            echo "⚠️ CLOUDFLARE_API_TOKEN not configured, skipping WAF rules"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Applying Cloudflare WAF rules..."
          
          # Minimal WAF template
          cat > waf_rules.json <<'EOF'
          {
            "rules": [
              {
                "description": "Block known bad bots",
                "expression": "(cf.client.bot) and not (cf.verified_bot_category in {\"Search Engine Crawler\" \"Monitoring & Analytics\"})",
                "action": "block"
              },
              {
                "description": "Rate limit API endpoints",
                "expression": "(http.request.uri.path matches \"^/api/\") and (rate(1m) > 60)",
                "action": "challenge"
              },
              {
                "description": "Block common attack patterns",
                "expression": "(http.request.uri.query contains \"union select\") or (http.request.uri.query contains \"<script\")",
                "action": "block"
              }
            ]
          }
          EOF
          
          # Save rules snapshot
          mkdir -p infra/cloudflare
          cp waf_rules.json infra/cloudflare/rules.json
          
          # In production, this would apply via Cloudflare API:
          # curl -X POST "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/rulesets" \
          #   -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
          #   -H "Content-Type: application/json" \
          #   -d @waf_rules.json
          
          echo "✅ WAF rules template created"
          echo "applied=template_only" >> $GITHUB_OUTPUT
      
      - name: Create Evidence
        if: always()
        run: |
          TS=$(date -u +%Y%m%d-%H%M%S)
          EVIDENCE_DIR="docs/evidence/$TS"
          mkdir -p "$EVIDENCE_DIR"
          
          cat > "$EVIDENCE_DIR/ABUSE_GUARD.json" <<EOF
          {
            "timestamp": "$TS",
            "synthetic_tests": {
              "rate_limits": {
                "status": "${{ steps.rate_limits.outputs.failed == '1' && 'FAILED' || 'PASSED' }}",
                "burst_protection": "active"
              },
              "media_validation": {
                "status": "${{ steps.media_test.outputs.failed == '1' && 'FAILED' || 'PASSED' }}",
                "max_file_size_mb": 10
              },
              "suspicious_content": {
                "status": "${{ steps.link_test.outputs.failed == '1' && 'FAILED' || 'PASSED' }}",
                "patterns_checked": ["bit.ly", "crypto scams", "phishing"]
              }
            },
            "waf": {
              "provider": "cloudflare",
              "status": "${{ steps.waf.outputs.applied || 'not_configured' }}",
              "rules_snapshot": "infra/cloudflare/rules.json"
            },
            "policy_config": "services/risk-guard/policy.json"
          }
          EOF
          
          echo "Evidence created at $EVIDENCE_DIR/ABUSE_GUARD.json"
      
      - name: Commit Changes
        if: steps.waf.outputs.applied != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add infra/cloudflare/ docs/evidence/
          git diff --staged --quiet || git commit -m "chore(security): Update WAF rules and abuse guard evidence $(date -u +%Y%m%d-%H%M%S)"
          git push origin main || echo "No changes to push"
